#ifndef lint
#if 0
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#else
static char yyrcsid[] = "$NetBSD: skeleton.c,v 1.10 1996/03/25 00:36:18 mrg Exp $";
#endif
#endif
#include <stdlib.h>
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYLEX yylex()
#define YYEMPTY -1
#define yyclearin (yychar=(YYEMPTY))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 27 "parser.y"

# define INCLUDE_CTYPE
# include "comp.h"
# include "str.h"
# include "array.h"
# include "object.h"
# include "xfloat.h"
# include "interpret.h"
# include "macro.h"
# include "token.h"
# include "ppcontrol.h"
# include "node.h"
# include "compile.h"

# define yylex		pp_gettok
# define yyerror	c_error

int nerrors;			/* number of errors encountered so far */
static int ndeclarations;	/* number of declarations */
static int nstatements;		/* number of statements in current function */
static bool typechecking;	/* does the current function have it? */

static void  t_void	(node*);
static bool  t_unary	(node*, const char*);
static node *prefix	(int, node*, const char*);
static node *postfix	(int, node*, const char*);
static node *cast	(node*, node*);
static node *idx	(node*, node*);
static node *range	(node*, node*, node*);
static node *bini	(int, node*, node*, const char*);
static node *bina	(int, node*, node*, const char*);
static node *mult	(int, node*, node*, const char*);
static node *mdiv	(int, node*, node*, const char*);
static node *mod	(int, node*, node*, const char*);
static node *add	(int, node*, node*, const char*);
static node *sub	(int, node*, node*, const char*);
static node *umin	(node*);
static node *lshift	(int, node*, node*, const char*);
static node *rshift	(int, node*, node*, const char*);
static node *rel	(int, node*, node*, const char*);
static node *eq		(node*, node*);
static node *_and	(int, node*, node*, const char*);
static node *_xor	(int, node*, node*, const char*);
static node *_or	(int, node*, node*, const char*);
static node *land	(node*, node*);
static node *lor	(node*, node*);
static node *quest	(node*, node*, node*);
static node *assign	(node*, node*);
static node *comma	(node*, node*);

#line 94 "parser.y"
typedef union {
    Int number;			/* lex input */
    Float real;			/* lex input */
    unsigned short type;	/* internal */
    struct node *node;		/* internal */
} YYSTYPE;
#line 77 "y.tab.c"
#define VOID 257
#define INHERIT 258
#define MAPPING 259
#define BREAK 260
#define ELSE 261
#define CASE 262
#define NIL 263
#define FOR 264
#define STATIC 265
#define CONTINUE 266
#define PRIVATE 267
#define FUNCTION 268
#define RLIMITS 269
#define RETURN 270
#define OPERATOR 271
#define FLOAT 272
#define DO 273
#define IF 274
#define OBJECT 275
#define GOTO 276
#define STRING 277
#define WHILE 278
#define NEW 279
#define VARARGS 280
#define CATCH 281
#define SWITCH 282
#define NOMASK 283
#define ATOMIC 284
#define INT 285
#define DEFAULT 286
#define MIXED 287
#define LARROW 288
#define RARROW 289
#define PLUS_PLUS 290
#define MIN_MIN 291
#define LSHIFT 292
#define RSHIFT 293
#define LE 294
#define GE 295
#define EQ 296
#define NE 297
#define LAND 298
#define LOR 299
#define PLUS_EQ 300
#define MIN_EQ 301
#define MULT_EQ 302
#define DIV_EQ 303
#define MOD_EQ 304
#define LSHIFT_EQ 305
#define RSHIFT_EQ 306
#define AND_EQ 307
#define XOR_EQ 308
#define OR_EQ 309
#define COLON_COLON 310
#define DOT_DOT 311
#define ELLIPSIS 312
#define STRING_CONST 313
#define IDENTIFIER 314
#define INT_CONST 315
#define FLOAT_CONST 316
#define MARK 317
#define HASH 318
#define HASH_HASH 319
#define INCL_CONST 320
#define NR_TOKENS 321
#define YYERRCODE 256
short yylhs[] = {                                        -1,
   58,    0,   57,   57,   59,   59,   59,    7,    7,   56,
    9,    9,   13,   13,    8,   61,   63,   62,   64,   62,
   65,   10,   10,   10,   10,   11,   11,   12,   12,   14,
   14,    1,    1,    1,    2,    2,    3,    3,    4,    4,
    5,    5,    5,    5,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   60,   60,    6,    6,   16,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   18,   18,
   19,   20,   20,   21,   21,   22,   22,   23,   23,   23,
   66,   24,   25,   25,   25,   67,   25,   68,   25,   69,
   25,   70,   25,   71,   25,   72,   73,   25,   74,   25,
   75,   25,   76,   25,   77,   25,   78,   25,   25,   25,
   25,   25,   25,   79,   26,   27,   27,   28,   28,   28,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   80,   29,   29,   29,   29,   29,   30,
   30,   30,   31,   31,   31,   32,   32,   32,   32,   32,
   32,   32,   33,   33,   34,   34,   34,   34,   35,   35,
   35,   36,   36,   36,   37,   37,   37,   37,   37,   38,
   38,   38,   39,   39,   40,   40,   41,   41,   42,   42,
   43,   43,   44,   81,   82,   44,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   46,   46,
   47,   47,   48,   49,   50,   50,   51,   51,   51,   52,
   52,   52,   53,   54,   54,   55,   55,   55,
};
short yylen[] = {                                         2,
    0,    2,    0,    2,    6,    1,    1,    0,    1,    1,
    1,    3,    1,    3,    1,    4,    0,    5,    0,    7,
    4,    0,    1,    1,    2,    1,    3,    2,    1,    2,
    1,    1,    1,    2,    1,    2,    1,    1,    0,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    0,    1,    0,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    3,    4,    4,    1,    1,
    5,    1,    1,    1,    3,    0,    2,    1,    1,    2,
    0,    6,    2,    1,    1,    0,    4,    0,    8,    0,
    6,    0,   10,    0,    8,    0,    0,    5,    0,    6,
    0,    5,    0,    7,    0,    4,    0,    4,    3,    2,
    2,    3,    1,    0,    4,    0,    2,    1,    2,    3,
    1,    1,    1,    1,    5,    5,    1,    2,    3,    4,
    5,    8,    7,    0,    5,    3,    6,    6,    4,    1,
    4,    6,    1,    2,    2,    1,    2,    2,    2,    2,
    2,    2,    1,    5,    1,    3,    3,    3,    1,    3,
    3,    1,    3,    3,    1,    3,    3,    3,    3,    1,
    3,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    0,    0,    7,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    0,    1,    1,    1,    1,    3,    0,    1,    2,    0,
    1,    2,    3,    1,    3,    0,    1,    2,
};
short yydefred[] = {                                      1,
    0,    3,    0,   41,    0,   44,   43,   42,    0,    0,
    0,    0,    4,    6,    7,   53,   50,   51,   46,    0,
   47,   45,   52,   10,   56,    0,   37,    0,   35,   38,
    0,   15,    0,   13,    0,   11,    0,   82,    0,   84,
    0,    0,   36,    0,    9,    0,    0,    0,   57,   80,
    0,    0,    0,   16,   56,    0,    0,    0,    0,   26,
   29,   56,   31,   55,    0,   14,   12,   74,   75,   71,
   72,   69,   70,   59,   61,   60,   62,   63,   64,   65,
   66,   67,   68,   73,    0,    0,  124,   18,   83,   85,
   28,   19,   25,    0,    0,   30,    0,    0,    0,    0,
   86,    0,   27,   58,    5,   78,   77,   81,    0,   20,
    0,    0,    0,  133,    0,    0,    0,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
  132,  123,    0,    0,    0,    0,    0,  125,    0,    0,
   32,  134,    0,   87,    0,   89,   94,    0,  150,    0,
    0,  163,  165,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  209,    0,    0,   88,   90,  120,
    0,    0,    0,    0,  121,    0,    0,  214,    0,    0,
    0,    0,    0,    0,  144,    0,    0,  115,  157,  158,
  129,    0,  160,    0,    0,    0,   56,    0,  159,    0,
    0,  162,  161,   56,    0,   96,    0,    0,    0,    0,
  154,  155,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  194,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   93,    0,  117,    0,  111,    0,    0,    0,
  122,    0,    0,  119,    0,    0,    0,  107,    0,    0,
    0,    0,  224,    0,    0,  215,    0,    0,    0,  139,
    0,    0,    0,  130,   79,    0,    0,    0,    0,    0,
    0,    0,    0,  166,  167,  168,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  199,  200,  201,  202,  203,  204,  205,  206,
  207,  208,  198,  210,    0,    0,    0,    0,    0,    0,
   91,  100,    0,    0,    0,  109,  116,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   21,   97,  219,    0,
  140,  149,    0,  151,    0,    0,  118,  113,  112,    0,
    0,    0,    0,    0,    0,  145,    0,  108,    0,    0,
  223,  225,  136,  216,  135,  164,    0,  141,    0,    0,
  195,    0,    0,  104,    0,   92,  101,  147,  127,  110,
    0,    0,  148,  152,    0,  114,    0,    0,    0,  143,
    0,  196,  102,  105,   99,  142,    0,  103,
};
short yydgoto[] = {                                       1,
    9,   28,   10,   11,   12,   37,   44,  142,   35,   58,
   59,   60,   36,   61,   62,   38,   50,  143,   89,   40,
   41,  109,  144,  145,  146,  147,  358,  148,  149,  150,
  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
  161,  162,  163,  164,  165,  166,  178,  250,  179,  277,
  278,  268,  263,  264,  265,  173,    3,    2,   13,   65,
   14,   15,   53,  102,  168,  353,  276,  180,  354,  397,
  388,  186,  325,  359,  317,  372,  260,  315,  101,  257,
  302,  385,
};
short yysindex[] = {                                      0,
    0,    0, -175,    0,    0,    0,    0,    0, 1432, -130,
 -221,    0,    0,    0,    0,    0,    0,    0,    0,  -37,
    0,    0,    0,    0,    0,   43,    0, -130,    0,    0,
 -212,    0,  -37,    0,   85,    0,  -24,    0,    0,    0,
   -1, -113,    0, -150,    0,   28,  -37, 2445,    0,    0,
   93,    0,   38,    0,    0,    0, 1432,   95,  -27,    0,
    0,    0,    0,    0,  -37,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -61, -113,    0,    0,    0,    0,
    0,    0,    0, 1374,  -22,    0,   25,   58,  108,  142,
    0,   38,    0,    0,    0,    0,    0,    0,  258,    0,
  126,  128,  386,    0,  150,  135,  155,  386,    0,  157,
 -212,  158, -150,  163,  164,  147,  386,  386, -227,    0,
    0,    0,  386,   56,  386,  -36,  386,    0,  386,  -66,
    0,    0, -103,    0,  -53,    0,    0,  170,    0,  -45,
 -159,    0,    0,   77,   52, -182,  -31, -157,  179,  131,
   96,  -74,  -57,  187,    0,   29,  169,    0,    0,    0,
  163,  -42,    0,  386,    0,  386,  185,    0,  171,  316,
  386,  172,  386,  -37,    0,   38,  386,    0,    0,    0,
    0,    0,    0,  386,  386,  386,    0,   74,    0,  190,
  194,    0,    0,    0, -227,    0,  386, -150, -212,  386,
    0,    0,  386,  386,  386,  386,  386,  386,  386,  386,
  386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
    0,  386,  386,  386,  386,  386,  386,  386,  386,  386,
  386,  386,    0,  386,    0,  386,    0,  177,  185,  198,
    0,  -20,  208,    0,  224,  228,  386,    0,  231,  316,
  232,  223,    0,  253,  206,    0,  256,  180,  107,    0,
  386,  386,   47,    0,    0,  316,  -17,  261,  -37,  264,
  185,  216,    3,    0,    0,    0,   77,   77,   52,   52,
 -182, -182, -182, -182,  -31,  -31, -157,  179,  131,   96,
  -74,  386,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  316,  252,  316,  386,  386,  271,
    0,    0,  386,   82,  254,    0,    0,  282,  386,  386,
  284,  386,  285,  386,  288,  289,    0,    0,    0,  386,
    0,    0,  386,    0,  386,    1,    0,    0,    0,  273,
  293,  386,  316,  316,  297,    0,  316,    0,   38,  386,
    0,    0,    0,    0,    0,    0,  283,    0,  298,  247,
    0,  316,  386,    0,  301,    0,    0,    0,    0,    0,
  309,  386,    0,    0,  386,    0,  310,   38,  294,    0,
  311,    0,    0,    0,    0,    0,  316,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    2,    0, 1946,    0,    0,    0,    0,    0,
 1563, 2234,    0,    0,    0,    0,    0,    0,    0,  -34,
    0,    0,    0,    0,    0,    0,    0, 1658,    0,    0,
  -29,    0,    0,    0,  -32,    0,    0,    0,   -6,    0,
    0,  314,    0,  -25,    0,    0,    0,    0,    0,    0,
    0,   22,    0,    0,    0,  -28,    0,    0,  317,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  314,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -35,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  376,    0,
    0,    0,    0,    0,    0,    0,    0,  303,    0,    0,
    0,    0,  -25,  234,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  320,    0,  195,    0,    0,    0,    0,  716,
  770,    0,    0,  868, 1088, 1279, 1599, 1788, 1987, 2076,
 2116, 2388, 2417,  -18,    0,    0, 1974,    0,    0,    0,
    0,    0,  580,  303,    0,    0,   11,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  648,    0,    0,  272,  239,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  326,  -25,    0,   57,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   13,    0,
    0,    0,    0,    0,    0,  675,    0,    0,    0,    0,
    0,    0,    0,  280,    0,    0,  249,    0,    0,    0,
    0,  326,    0,    0,    0,    0,  335,    0,    0,    0,
  -59,    0,    0,    0,    0,    0,  991, 1059, 1147, 1184,
 1373, 1468, 1505, 1562, 1657, 1694, 1883, 2008, 2100, 2301,
 2404,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  303,    0,    0,
    0,    0,  326,    0,  130,    0,    0,    0,    0,  286,
    0,  255,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  326,    0,  292,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  326,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  336,    0,    0,    0,    0,    0,    0,    0,
    0,  326,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
  269,    0,   50,  313,   54,  -41,    0,   -8,   14,  296,
    0,  324,    4,  366,   26,  363,    0,  -13,  402,  373,
  226,    0,    0,    0, -131,  -52,    0,    0,    0,    0,
    0,    0,  -72,  -39,  -38,   -7,  -67,  207,  205,  209,
  212,  204,    0,   51, 2320, 2457, -155, -107, -180,  242,
 -230,    0,  105,    0,    0,   -9,    0,    0,    0,  -87,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
#define YYTABLESIZE 2830
short yytable[] = {                                      26,
   88,    2,   33,  200,   76,  231,   48,   48,   49,   49,
    8,   34,   23,   53,   54,  247,   94,   49,  248,   49,
   95,   45,  197,   51,   34,  197,  340,   52,  222,  283,
  223,   99,   63,  213,   25,  184,   31,   83,   34,  197,
  197,  336,   55,   48,  244,  210,   46,   63,  252,  110,
   67,  212,   83,  213,  189,  190,   34,   54,  371,   29,
  193,   79,  199,   30,  202,   58,  203,   47,   66,  212,
   47,  213,  244,  253,  197,  255,   63,   43,   97,  259,
   58,   30,   42,  105,   63,  104,   24,  243,  139,    4,
   55,    5,  355,  136,  216,  134,  217,  194,  133,  167,
  135,   24,  282,  212,    6,  337,  197,    7,    8,  218,
  219,  182,  369,  215,  270,  191,   17,  244,  213,  192,
  279,  261,  356,  214,   64,  244,  201,   47,  327,  381,
  211,  212,   86,  258,    4,   92,   27,  350,  224,  225,
  284,  285,  286,   56,  338,   17,  195,  334,   49,    6,
  106,  391,    7,    8,   18,  269,  295,  296,   19,  197,
   87,   20,  126,   21,  370,  204,   57,  126,  107,  126,
  167,   22,  126,   23,  126,   34,  287,  288,  196,  289,
  290,  137,  108,  347,  169,  349,  170,  256,  126,  174,
   16,  274,   17,  175,  176,  275,  181,  183,  335,  280,
   24,   18,  185,  187,  188,   19,  205,  206,   20,  207,
   21,  351,  291,  292,  293,  294,  226,  387,   22,  228,
   23,  376,  377,  229,  227,  379,  245,   95,  244,  251,
  254,  271,   95,  272,   95,  318,   48,   95,   49,   95,
  386,  230,  208,  209,  375,    8,   48,  242,  321,   98,
  167,  212,  126,   95,  126,  126,  319,  320,   39,   39,
   39,  366,  220,  221,  322,  398,  167,  323,  246,   39,
   34,  326,  328,   39,   76,   32,   39,   24,   39,   48,
  329,   49,  342,    8,   93,   53,   39,   54,   39,   24,
  139,   24,  197,  197,  339,  136,  330,  134,  331,  332,
  133,  341,  135,  343,  333,  167,  380,  167,  344,  348,
  352,  357,   16,  345,   17,   39,  132,   95,  114,   95,
   95,  360,  382,   18,  363,  365,   48,   19,  367,  368,
   20,  373,   21,  374,  123,  394,  171,  378,  383,  384,
   22,  389,   23,  167,  167,  127,  128,  167,  139,  390,
  393,  396,  395,  136,   22,  134,  106,   24,  133,  128,
  135,  211,  167,  220,  226,  129,  217,  211,   32,   24,
  130,  131,  227,  221,  132,  218,  211,  140,  228,  222,
   87,  100,  138,  137,  211,  126,  126,  167,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
  126,  126,  126,  126,  126,  126,  126,  103,  139,  126,
  126,  141,   91,  136,   96,  134,   39,   90,  133,  273,
  135,  298,  297,  301,  362,  392,  299,  267,   87,  126,
  300,  137,  126,  126,  126,  126,    0,    0,    0,    0,
   95,   95,    0,   95,   95,    0,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
   95,   95,    0,    0,   95,   95,  232,  233,  234,  235,
  236,  237,  238,  239,  240,  241,    0,    0,    0,    0,
    0,    0,    0,    0,   95,    0,    0,   95,   95,   95,
   95,  137,    0,  111,    0,    0,    0,  112,    0,  113,
  114,  115,    4,  116,    5,    0,  117,  118,   48,    0,
  119,  120,    0,  121,    0,  122,  123,    6,  124,  125,
    7,    8,    0,  126,    0,    0,    0,  127,  128,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  129,    0,    0,
   32,   24,  130,  131,    0,  112,    0,  113,  114,  115,
    0,  116,    0,    0,  117,  118,   48,    0,  119,  120,
    0,  121,    0,  122,  123,    0,  124,  125,    0,    0,
    0,  126,    0,    0,    0,  127,  128,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  137,  137,    0,   79,
  137,  137,  137,  137,  137,  129,  137,    0,   32,   24,
  130,  131,   39,    0,   39,    0,    0,  137,  137,  137,
  137,  137,  137,   39,    0,    0,    0,   39,  114,    0,
   39,    0,   39,    0,    0,    0,   48,    0,    0,    0,
   39,    0,   39,    0,  123,    0,  171,    0,    0,    0,
  137,    0,  137,  137,    0,  127,  128,    0,    0,    0,
    0,    0,    0,    0,  138,  138,    0,   79,  138,  138,
  138,  138,  138,    0,  138,  129,    0,    0,   32,   24,
  130,  131,    0,  137,  137,  138,  138,  138,  138,  138,
  138,  146,  146,    0,    0,  146,  146,  146,  146,  146,
    0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  146,  146,  146,  146,  146,  146,  138,    0,
  138,  138,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  153,  153,    0,    0,  153,  153,  153,  153,
  153,    0,  153,    0,    0,  146,    0,  146,  146,    0,
    0,  138,  138,  153,  153,  153,  153,  153,  153,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  146,  146,
    0,    0,    0,    0,    0,    0,  156,  156,  153,  153,
  156,  156,  156,  156,  156,    0,  156,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  156,  156,  156,
  156,  156,  156,    0,    0,    0,    0,    0,    0,  153,
  153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  156,  156,    0,    0,    0,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,   79,
  137,  137,    0,  156,  156,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  169,    0,    0,  169,    0,
  169,  169,  169,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  169,  169,  169,  169,  169,
  169,    0,    0,    0,    0,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  138,    0,  138,  138,
  169,  169,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
  146,  146,  146,  146,    0,  146,  146,    0,    0,    0,
    0,  169,  169,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,    0,  153,  153,  170,    0,
    0,  170,    0,  170,  170,  170,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  170,  170,
  170,  170,  170,  170,    0,    0,    0,    0,    0,    0,
    0,  156,  156,  156,  156,  156,  156,  156,  156,  156,
  156,  156,  156,  156,  156,  156,  156,  156,  156,    0,
  156,  156,    0,  170,  170,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  171,    0,    0,  171,
    0,  171,  171,  171,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  170,  170,  171,  171,  171,  171,
  171,  171,    0,    0,    0,  172,    0,    0,  172,    0,
    0,  172,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  172,  172,  172,  172,  172,
  172,  171,  171,    0,    0,    0,    0,    0,    0,  169,
  169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
  169,  169,  169,  169,  169,  169,  169,    0,  169,  169,
  172,  172,  171,  171,  173,    0,    0,  173,    0,    0,
  173,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  173,  173,  173,  173,  173,  173,
    0,  172,  172,    0,    0,    0,    0,    0,    0,    0,
    0,  174,    0,    0,  174,    0,    0,  174,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  173,
  173,  174,  174,  174,  174,  174,  174,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  173,  173,    0,    0,    0,    0,  174,  174,    0,    0,
    0,    0,  170,  170,  170,  170,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
    0,  170,  170,    0,    0,    0,    0,  174,  174,    0,
    0,    0,    0,    0,    0,    0,  175,    0,    0,  175,
    0,    0,  175,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  175,  175,  175,  175,
  175,  175,    0,    0,    0,    0,    0,    0,    0,    0,
  171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,    0,  171,
  171,  175,  175,    0,    0,    0,    0,    0,    0,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,    0,  172,  172,
    0,    0,  175,  175,    0,    0,    0,    0,    0,    0,
  178,    0,    0,  178,    0,    0,  178,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  178,  178,  178,  178,  178,  178,    0,    0,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,    0,  173,  173,    0,
    0,    0,    0,    0,    0,  178,  178,    0,    0,    0,
    0,    0,    0,    0,    0,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,    0,  174,  174,  178,  178,    0,    0,
    0,    0,    0,    0,    0,  179,    0,    0,  179,    0,
    0,  179,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  179,  179,  179,  179,  179,
  179,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  176,    0,    0,  176,    0,    0,  176,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  179,  179,  176,  176,  176,  176,  176,  176,    0,    0,
    0,    0,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,    0,  175,
  175,  179,  179,    0,    0,    0,    0,  176,  176,  177,
    0,    0,  177,    0,    0,  177,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  177,
  177,  177,  177,  177,  177,    0,    0,    0,  176,  176,
   16,    0,   17,    0,    0,    0,  180,    0,    0,  180,
    0,   18,  180,    0,    0,   19,    0,    0,   20,    0,
   21,    0,    0,   57,  177,  177,  180,  180,   22,  180,
   23,  180,    0,    0,    0,    0,  178,  178,  178,  178,
  178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
  178,  178,    0,  178,  178,  177,  177,   24,   16,    0,
   17,  180,  180,    0,  181,    0,    0,  181,    0,   18,
  181,    0,    0,   19,    0,    0,   20,    0,   21,    0,
    0,    0,    0,    0,  181,  181,   22,  181,   23,  181,
    0,    0,  180,  180,    0,    0,    0,    0,    0,    0,
    0,  182,    0,    0,  182,    0,    0,  182,    0,    0,
    0,    0,    0,    0,    0,   24,    0,    0,    0,  181,
  181,  182,  182,    0,  182,    0,  182,    0,    0,    0,
    0,  179,  179,  179,  179,  179,  179,  179,  179,  179,
  179,  179,  179,  179,  179,  179,  179,    0,  179,  179,
  181,  181,    0,    0,    0,    0,  182,  182,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,    0,  176,  176,  182,  182,   32,
    0,   32,    0,    0,    0,  183,    0,    0,  183,    0,
   32,  183,    0,    0,   32,    0,    0,   32,    0,   32,
    0,    0,    0,    0,    0,  183,  183,   32,  183,   32,
  183,    0,    0,    0,    0,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,    0,  177,  177,    0,    0,   32,    0,    0,    0,
  183,  183,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  180,  180,  180,  180,  180,  180,
  180,  180,  180,  180,  180,  180,  180,  180,    0,  180,
  180,  183,  183,    0,   34,    0,   34,    0,    0,    0,
  184,    0,    0,  184,    0,   34,  184,    0,    0,   34,
    0,    0,   34,    0,   34,    0,    0,    0,    0,    0,
  184,  184,   34,  184,   34,  184,    0,    0,    0,    0,
    0,    0,  181,  181,  181,  181,  181,  181,  181,  181,
  181,  181,  181,  181,  181,  181,    0,  181,  181,    0,
    0,   34,    0,    0,    0,  184,  184,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,    0,  182,  182,  184,  184,    0,    0,
  137,  137,    0,   79,    0,  137,  137,  137,  137,    0,
  137,    0,    0,    0,    0,    0,    0,  185,    0,    0,
  185,    0,  137,  137,  137,  137,  137,    0,    0,    0,
    0,    0,    0,    0,  185,  185,    0,  185,  186,  185,
    0,  186,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  137,  186,  186,  137,  186,    0,
  186,    0,    0,    0,    0,    0,    0,    0,    0,  185,
  185,    0,    0,    0,    0,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  137,  183,  183,
  186,  186,    0,    0,    0,    0,    0,    0,    0,    0,
  185,  185,    0,    0,    0,    0,  187,    0,    0,  187,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  186,  186,  187,  187,    0,  187,    0,  187,    0,
  188,    0,    0,  188,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  189,  188,  188,  189,
  188,    0,  188,    0,    0,    0,    0,    0,  187,    0,
    0,    0,    0,  189,  189,    0,  189,    0,  189,    0,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  188,  184,  184,    0,    0,    0,    0,  187,
  187,    0,   40,   40,   40,    0,    0,    0,  189,    0,
   37,    0,   37,   40,    0,    0,    0,   40,    0,    0,
   40,    0,   40,  188,  188,   37,    0,    0,   37,   37,
   40,    0,   40,    0,    0,    0,    0,    0,    0,    0,
  189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
    0,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
  137,  137,  137,   79,  185,  185,  185,  185,  185,  185,
  185,  185,  185,  185,  185,  185,    0,  185,  185,    0,
    0,    0,    0,    0,    0,  186,  186,  186,  186,  186,
  186,  186,  186,  186,  186,  186,  186,    0,  186,  186,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  190,    0,    0,  190,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  190,  190,
    0,  190,    0,  190,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  187,  187,  187,  187,  187,  187,  187,
  187,  187,  187,  187,  187,    0,  187,  187,    0,    0,
    0,    0,    0,  190,    0,    0,    0,  188,  188,  188,
  188,  188,  188,  188,  188,  188,  188,  188,  188,    0,
  188,  188,    0,  189,  189,  189,  189,  189,  189,  189,
  189,  189,  189,  189,  189,  190,  189,  189,  191,    0,
    0,  191,  172,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  192,  191,  191,  192,  191,    0,
  191,    0,    0,    0,    0,    0,    0,  193,    0,    0,
  193,  192,  192,    0,  192,    0,  192,    0,    0,    0,
    0,    0,    0,    0,  193,  193,    0,  193,    0,    0,
  191,   78,   79,    0,    0,    0,   75,   74,    0,   76,
   33,   77,   33,    0,    0,    0,  192,    0,   38,    0,
   38,   33,    0,    0,   82,   33,   83,    0,   33,  193,
   33,    0,  191,   38,  262,  266,   38,   38,   33,    0,
   33,    0,    0,    0,    0,    0,  266,    0,  192,    0,
    0,    0,    0,    0,    0,   85,    0,    0,   80,    0,
    0,  193,    0,    0,    0,    0,    0,   33,    0,    0,
    0,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,    0,  314,    0,  316,    0,    0,   81,    0,
   84,    0,    0,    0,  177,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  198,  266,    0,    0,    0,    0,    0,    0,  190,  190,
  190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
    0,  190,  190,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  177,    0,  249,    0,    0,    0,    0,  249,    0,  249,
    0,    0,  266,  249,    0,    0,    0,    0,  361,  262,
    0,  364,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0,  266,    0,    0,    0,  281,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  266,
    0,    0,    0,    0,    0,    0,  191,  191,  191,  191,
  191,  191,  191,  191,  191,  191,  191,    0,  191,  191,
    0,  266,  192,  192,  192,  192,  192,  192,  192,  192,
  192,  192,  192,  324,  192,  192,  193,  193,  193,  193,
  193,  193,  193,  193,  193,  193,    0,  193,  193,    0,
    0,    0,    0,    0,   68,   69,   70,   71,   72,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  346,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  177,  249,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  177,    0,    0,    0,    0,    0,    0,  249,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  177,
};
short yycheck[] = {                                       9,
   53,    0,   40,   40,   40,   63,   41,   42,   41,   42,
   40,   20,   41,   42,   40,   58,   44,   42,  174,   42,
   62,   31,   41,   37,   33,   44,   44,   37,   60,  210,
   62,   93,   42,   93,    9,  123,  258,   44,   47,   58,
   59,  272,   44,  271,   44,   91,   33,   57,  180,  102,
   47,   41,   59,   41,  127,  128,   65,   59,   58,   10,
  133,   40,  135,   10,  137,   44,  139,   43,   41,   59,
   43,   59,   44,  181,   93,  183,   86,   28,   65,  187,
   59,   28,   40,   59,   94,   95,  314,   59,   33,  265,
   44,  267,  323,   38,   43,   40,   45,   42,   43,  109,
   45,  314,  210,   93,  280,   59,  125,  283,  284,  292,
  293,  121,  343,   37,   41,  129,  123,   44,   42,  129,
  208,  194,   41,   47,  275,   44,  136,   43,  260,  360,
  290,  291,   40,  186,  265,   41,  267,  318,  296,  297,
  213,  214,  215,  257,  276,  259,   91,   41,   42,  280,
   93,  382,  283,  284,  268,  197,  224,  225,  272,  134,
  123,  275,   33,  277,  345,  140,  280,   38,   61,   40,
  180,  285,   43,  287,   45,  184,  216,  217,  123,  218,
  219,  126,   41,  315,   59,  317,   59,  184,   59,   40,
  257,  205,  259,   59,   40,  205,   40,   40,  271,  209,
  314,  268,   40,   40,   58,  272,  310,  261,  275,   40,
  277,  319,  220,  221,  222,  223,   38,  373,  285,  124,
  287,  353,  354,  298,   94,  357,   58,   33,   44,   59,
   59,   42,   38,   40,   40,   59,  271,   43,  271,   45,
  372,  299,  288,  289,  352,  275,  271,   61,   41,  311,
  260,  311,  123,   59,  125,  126,   59,  278,  257,  258,
  259,  334,  294,  295,   41,  397,  276,   40,  311,  268,
  279,   41,   41,  272,  310,  313,  275,  314,  277,  314,
   58,  314,  279,  313,  312,  314,  285,  313,  287,  314,
   33,  314,  311,  312,  312,   38,   44,   40,   93,   44,
   43,   41,   45,   40,  125,  315,  359,  317,   93,   58,
   40,   58,  257,  311,  259,  314,   59,  123,  263,  125,
  126,   40,   40,  268,   41,   41,  271,  272,   41,   41,
  275,   59,  277,   41,  279,  388,  281,   41,   41,   93,
  285,   41,  287,  353,  354,  290,  291,  357,   33,   41,
   41,   41,   59,   38,   41,   40,  123,   41,   43,   40,
   45,   59,  372,  125,   93,  310,   41,  311,  313,  314,
  315,  316,   93,  125,   59,   41,   41,  109,   93,  125,
  123,   86,  125,  126,   93,  256,  257,  397,  259,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,
  281,  282,  283,  284,  285,  286,  287,   94,   33,  290,
  291,  109,   57,   38,   62,   40,   25,   55,   43,  204,
   45,  227,  226,  230,  330,  385,  228,  196,  123,  310,
  229,  126,  313,  314,  315,  316,   -1,   -1,   -1,   -1,
  256,  257,   -1,  259,  260,   -1,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,   -1,   -1,  290,  291,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  310,   -1,   -1,  313,  314,  315,
  316,  126,   -1,  256,   -1,   -1,   -1,  260,   -1,  262,
  263,  264,  265,  266,  267,   -1,  269,  270,  271,   -1,
  273,  274,   -1,  276,   -1,  278,  279,  280,  281,  282,
  283,  284,   -1,  286,   -1,   -1,   -1,  290,  291,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,   -1,   -1,
  313,  314,  315,  316,   -1,  260,   -1,  262,  263,  264,
   -1,  266,   -1,   -1,  269,  270,  271,   -1,  273,  274,
   -1,  276,   -1,  278,  279,   -1,  281,  282,   -1,   -1,
   -1,  286,   -1,   -1,   -1,  290,  291,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,  310,   47,   -1,  313,  314,
  315,  316,  257,   -1,  259,   -1,   -1,   58,   59,   60,
   61,   62,   63,  268,   -1,   -1,   -1,  272,  263,   -1,
  275,   -1,  277,   -1,   -1,   -1,  271,   -1,   -1,   -1,
  285,   -1,  287,   -1,  279,   -1,  281,   -1,   -1,   -1,
   91,   -1,   93,   94,   -1,  290,  291,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   -1,   47,  310,   -1,   -1,  313,  314,
  315,  316,   -1,  124,  125,   58,   59,   60,   61,   62,
   63,   37,   38,   -1,   -1,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   63,   91,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   41,   42,   43,   44,
   45,   -1,   47,   -1,   -1,   91,   -1,   93,   94,   -1,
   -1,  124,  125,   58,   59,   60,   61,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  124,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,   93,   94,
   41,   42,   43,   44,   45,   -1,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,
   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,  124,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   94,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
   43,   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
   93,   94,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,   -1,  311,  312,   -1,   -1,   -1,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,   -1,  311,  312,   38,   -1,
   -1,   41,   -1,   43,   44,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   61,   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  292,  293,  294,  295,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,   -1,
  311,  312,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   -1,   43,   44,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  124,  125,   58,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
   93,   94,  124,  125,   38,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   63,
   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   58,   59,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
   -1,  311,  312,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,   -1,  311,
  312,   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,  292,
  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   60,   61,   62,   63,   -1,   -1,  292,  293,
  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,   -1,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,   -1,  311,  312,  124,  125,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   94,   58,   59,   60,   61,   62,   63,   -1,   -1,
   -1,   -1,  294,  295,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,   -1,  311,
  312,  124,  125,   -1,   -1,   -1,   -1,   93,   94,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,   63,   -1,   -1,   -1,  124,  125,
  257,   -1,  259,   -1,   -1,   -1,   38,   -1,   -1,   41,
   -1,  268,   44,   -1,   -1,  272,   -1,   -1,  275,   -1,
  277,   -1,   -1,  280,   93,   94,   58,   59,  285,   61,
  287,   63,   -1,   -1,   -1,   -1,  294,  295,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,   -1,  311,  312,  124,  125,  314,  257,   -1,
  259,   93,   94,   -1,   38,   -1,   -1,   41,   -1,  268,
   44,   -1,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,
   -1,   -1,   -1,   -1,   58,   59,  285,   61,  287,   63,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   38,   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,   -1,   93,
   94,   58,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,  294,  295,  296,  297,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
  124,  125,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,  295,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,   -1,  311,  312,  124,  125,  257,
   -1,  259,   -1,   -1,   -1,   38,   -1,   -1,   41,   -1,
  268,   44,   -1,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,   -1,   -1,   -1,   -1,   58,   59,  285,   61,  287,
   63,   -1,   -1,   -1,   -1,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,   -1,  311,  312,   -1,   -1,  314,   -1,   -1,   -1,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,   -1,  311,
  312,  124,  125,   -1,  257,   -1,  259,   -1,   -1,   -1,
   38,   -1,   -1,   41,   -1,  268,   44,   -1,   -1,  272,
   -1,   -1,  275,   -1,  277,   -1,   -1,   -1,   -1,   -1,
   58,   59,  285,   61,  287,   63,   -1,   -1,   -1,   -1,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,   -1,  311,  312,   -1,
   -1,  314,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,   -1,  311,  312,  124,  125,   -1,   -1,
   37,   38,   -1,   40,   -1,   42,   43,   44,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   59,   60,   61,   62,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   41,   63,
   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   91,   58,   59,   94,   61,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   94,   -1,   -1,   -1,   -1,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  124,  311,  312,
   93,   94,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  124,  125,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,  125,   58,   59,   -1,   61,   -1,   63,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   58,   59,   44,
   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   63,   -1,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,   93,  311,  312,   -1,   -1,   -1,   -1,  124,
  125,   -1,  257,  258,  259,   -1,   -1,   -1,   93,   -1,
  265,   -1,  267,  268,   -1,   -1,   -1,  272,   -1,   -1,
  275,   -1,  277,  124,  125,  280,   -1,   -1,  283,  284,
  285,   -1,  287,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,   -1,  311,  312,   -1,
   -1,   -1,   -1,   -1,   -1,  298,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   61,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,   -1,  311,  312,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,   -1,
  311,  312,   -1,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  125,  311,  312,   41,   -1,
   -1,   44,  113,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   41,   58,   59,   44,   61,   -1,
   63,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   58,   59,   -1,   61,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   -1,   61,   -1,   -1,
   93,   37,   38,   -1,   -1,   -1,   42,   43,   -1,   45,
  257,   47,  259,   -1,   -1,   -1,   93,   -1,  265,   -1,
  267,  268,   -1,   -1,   60,  272,   62,   -1,  275,   93,
  277,   -1,  125,  280,  195,  196,  283,  284,  285,   -1,
  287,   -1,   -1,   -1,   -1,   -1,  207,   -1,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   -1,   -1,   94,   -1,
   -1,  125,   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,
   -1,  232,  233,  234,  235,  236,  237,  238,  239,  240,
  241,  242,   -1,  244,   -1,  246,   -1,   -1,  124,   -1,
  126,   -1,   -1,   -1,  118,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  134,  272,   -1,   -1,   -1,   -1,   -1,   -1,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
   -1,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  174,   -1,  176,   -1,   -1,   -1,   -1,  181,   -1,  183,
   -1,   -1,  323,  187,   -1,   -1,   -1,   -1,  329,  330,
   -1,  332,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  340,
   -1,   -1,  343,   -1,   -1,   -1,  210,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  360,
   -1,   -1,   -1,   -1,   -1,   -1,  299,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,   -1,  311,  312,
   -1,  382,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  257,  311,  312,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,   -1,  311,  312,   -1,
   -1,   -1,   -1,   -1,  290,  291,  292,  293,  294,  295,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  302,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  318,  319,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  345,   -1,   -1,   -1,   -1,   -1,   -1,  352,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  373,
};
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 321
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,0,"'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,"'/'",0,0,0,0,0,
0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,"'['",0,"']'","'^'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"VOID","INHERIT",
"MAPPING","BREAK","ELSE","CASE","NIL","FOR","STATIC","CONTINUE","PRIVATE",
"FUNCTION","RLIMITS","RETURN","OPERATOR","FLOAT","DO","IF","OBJECT","GOTO",
"STRING","WHILE","NEW","VARARGS","CATCH","SWITCH","NOMASK","ATOMIC","INT",
"DEFAULT","MIXED","LARROW","RARROW","PLUS_PLUS","MIN_MIN","LSHIFT","RSHIFT",
"LE","GE","EQ","NE","LAND","LOR","PLUS_EQ","MIN_EQ","MULT_EQ","DIV_EQ","MOD_EQ",
"LSHIFT_EQ","RSHIFT_EQ","AND_EQ","XOR_EQ","OR_EQ","COLON_COLON","DOT_DOT",
"ELLIPSIS","STRING_CONST","IDENTIFIER","INT_CONST","FLOAT_CONST","MARK","HASH",
"HASH_HASH","INCL_CONST","NR_TOKENS",
};
char *yyrule[] = {
"$accept : program",
"$$1 :",
"program : $$1 top_level_declarations",
"top_level_declarations :",
"top_level_declarations : top_level_declarations top_level_declaration",
"top_level_declaration : opt_private INHERIT opt_inherit_label opt_object composite_string ';'",
"top_level_declaration : data_declaration",
"top_level_declaration : function_declaration",
"opt_inherit_label :",
"opt_inherit_label : ident",
"ident : IDENTIFIER",
"composite_string : string_exp",
"composite_string : composite_string '+' string_exp",
"string_exp : string",
"string_exp : '(' composite_string ')'",
"string : STRING_CONST",
"data_declaration : class_specifier_list type_specifier list_dcltr ';'",
"$$2 :",
"function_declaration : class_specifier_list type_specifier function_dcltr $$2 compound_stmt",
"$$3 :",
"function_declaration : class_specifier_list ident '(' formals_declaration ')' $$3 compound_stmt",
"local_data_declaration : class_specifier_list type_specifier list_dcltr ';'",
"formals_declaration :",
"formals_declaration : VOID",
"formals_declaration : formal_declaration_list",
"formals_declaration : formal_declaration_list ELLIPSIS",
"formal_declaration_list : varargs_formal_declaration",
"formal_declaration_list : formal_declaration_list ',' varargs_formal_declaration",
"varargs_formal_declaration : VARARGS formal_declaration",
"varargs_formal_declaration : formal_declaration",
"formal_declaration : type_specifier data_dcltr",
"formal_declaration : ident",
"class_specifier_list : opt_private",
"class_specifier_list : non_private",
"class_specifier_list : class_specifier class_specifier_list2",
"class_specifier_list2 : class_specifier",
"class_specifier_list2 : class_specifier_list2 class_specifier",
"class_specifier : PRIVATE",
"class_specifier : non_private",
"opt_private :",
"opt_private : PRIVATE",
"non_private : STATIC",
"non_private : ATOMIC",
"non_private : NOMASK",
"non_private : VARARGS",
"type_specifier : INT",
"type_specifier : FLOAT",
"type_specifier : STRING",
"type_specifier : OBJECT",
"type_specifier : OBJECT composite_string",
"type_specifier : MAPPING",
"type_specifier : FUNCTION",
"type_specifier : MIXED",
"type_specifier : VOID",
"opt_object :",
"opt_object : OBJECT",
"star_list :",
"star_list : star_list '*'",
"data_dcltr : star_list ident",
"operator : OPERATOR '+'",
"operator : OPERATOR '-'",
"operator : OPERATOR '*'",
"operator : OPERATOR '/'",
"operator : OPERATOR '%'",
"operator : OPERATOR '&'",
"operator : OPERATOR '^'",
"operator : OPERATOR '|'",
"operator : OPERATOR '<'",
"operator : OPERATOR '>'",
"operator : OPERATOR LE",
"operator : OPERATOR GE",
"operator : OPERATOR LSHIFT",
"operator : OPERATOR RSHIFT",
"operator : OPERATOR '~'",
"operator : OPERATOR PLUS_PLUS",
"operator : OPERATOR MIN_MIN",
"operator : OPERATOR '[' ']'",
"operator : OPERATOR '[' ']' '='",
"operator : OPERATOR '[' DOT_DOT ']'",
"function_name : ident",
"function_name : operator",
"function_dcltr : star_list function_name '(' formals_declaration ')'",
"dcltr : data_dcltr",
"dcltr : function_dcltr",
"list_dcltr : dcltr",
"list_dcltr : list_dcltr ',' dcltr",
"dcltr_or_stmt_list :",
"dcltr_or_stmt_list : dcltr_or_stmt_list dcltr_or_stmt",
"dcltr_or_stmt : local_data_declaration",
"dcltr_or_stmt : stmt",
"dcltr_or_stmt : error ';'",
"$$4 :",
"if_stmt : IF '(' f_list_exp ')' $$4 stmt",
"stmt : list_exp ';'",
"stmt : compound_stmt",
"stmt : if_stmt",
"$$5 :",
"stmt : if_stmt ELSE $$5 stmt",
"$$6 :",
"stmt : DO $$6 stmt WHILE '(' f_list_exp ')' ';'",
"$$7 :",
"stmt : WHILE '(' f_list_exp ')' $$7 stmt",
"$$8 :",
"stmt : FOR '(' opt_list_exp ';' f_opt_list_exp ';' opt_list_exp ')' $$8 stmt",
"$$9 :",
"stmt : RLIMITS '(' f_list_exp ';' f_list_exp ')' $$9 compound_stmt",
"$$10 :",
"$$11 :",
"stmt : CATCH $$10 compound_stmt $$11 opt_caught_stmt",
"$$12 :",
"stmt : SWITCH '(' f_list_exp ')' $$12 compound_stmt",
"$$13 :",
"stmt : CASE exp ':' $$13 stmt",
"$$14 :",
"stmt : CASE exp DOT_DOT exp ':' $$14 stmt",
"$$15 :",
"stmt : DEFAULT ':' $$15 stmt",
"$$16 :",
"stmt : ident ':' $$16 stmt",
"stmt : GOTO ident ';'",
"stmt : BREAK ';'",
"stmt : CONTINUE ';'",
"stmt : RETURN f_opt_list_exp ';'",
"stmt : ';'",
"$$17 :",
"compound_stmt : '{' $$17 dcltr_or_stmt_list '}'",
"opt_caught_stmt :",
"opt_caught_stmt : ':' stmt",
"function_call : function_name",
"function_call : COLON_COLON function_name",
"function_call : function_name COLON_COLON function_name",
"primary_p1_exp : INT_CONST",
"primary_p1_exp : FLOAT_CONST",
"primary_p1_exp : NIL",
"primary_p1_exp : string",
"primary_p1_exp : '(' '{' opt_arg_list_comma '}' ')'",
"primary_p1_exp : '(' '[' opt_assoc_arg_list_comma ']' ')'",
"primary_p1_exp : ident",
"primary_p1_exp : COLON_COLON ident",
"primary_p1_exp : '(' list_exp ')'",
"primary_p1_exp : function_call '(' opt_arg_list ')'",
"primary_p1_exp : '&' ident '(' opt_arg_list ')'",
"primary_p1_exp : '&' '(' '*' cast_exp ')' '(' opt_arg_list ')'",
"primary_p1_exp : '(' '*' cast_exp ')' '(' opt_arg_list ')'",
"$$18 :",
"primary_p1_exp : CATCH '(' $$18 list_exp ')'",
"primary_p1_exp : NEW opt_object string_exp",
"primary_p1_exp : NEW opt_object string_exp '(' opt_arg_list ')'",
"primary_p1_exp : primary_p2_exp RARROW ident '(' opt_arg_list ')'",
"primary_p1_exp : primary_p2_exp LARROW opt_object string_exp",
"primary_p2_exp : primary_p1_exp",
"primary_p2_exp : primary_p2_exp '[' f_list_exp ']'",
"primary_p2_exp : primary_p2_exp '[' f_opt_list_exp DOT_DOT f_opt_list_exp ']'",
"postfix_exp : primary_p2_exp",
"postfix_exp : postfix_exp PLUS_PLUS",
"postfix_exp : postfix_exp MIN_MIN",
"prefix_exp : postfix_exp",
"prefix_exp : PLUS_PLUS cast_exp",
"prefix_exp : MIN_MIN cast_exp",
"prefix_exp : '-' cast_exp",
"prefix_exp : '+' cast_exp",
"prefix_exp : '!' cast_exp",
"prefix_exp : '~' cast_exp",
"cast_exp : prefix_exp",
"cast_exp : '(' type_specifier star_list ')' cast_exp",
"mult_oper_exp : cast_exp",
"mult_oper_exp : mult_oper_exp '*' cast_exp",
"mult_oper_exp : mult_oper_exp '/' cast_exp",
"mult_oper_exp : mult_oper_exp '%' cast_exp",
"add_oper_exp : mult_oper_exp",
"add_oper_exp : add_oper_exp '+' mult_oper_exp",
"add_oper_exp : add_oper_exp '-' mult_oper_exp",
"shift_oper_exp : add_oper_exp",
"shift_oper_exp : shift_oper_exp LSHIFT add_oper_exp",
"shift_oper_exp : shift_oper_exp RSHIFT add_oper_exp",
"rel_oper_exp : shift_oper_exp",
"rel_oper_exp : rel_oper_exp '<' shift_oper_exp",
"rel_oper_exp : rel_oper_exp '>' shift_oper_exp",
"rel_oper_exp : rel_oper_exp LE shift_oper_exp",
"rel_oper_exp : rel_oper_exp GE shift_oper_exp",
"equ_oper_exp : rel_oper_exp",
"equ_oper_exp : equ_oper_exp EQ rel_oper_exp",
"equ_oper_exp : equ_oper_exp NE rel_oper_exp",
"bitand_oper_exp : equ_oper_exp",
"bitand_oper_exp : bitand_oper_exp '&' equ_oper_exp",
"bitxor_oper_exp : bitand_oper_exp",
"bitxor_oper_exp : bitxor_oper_exp '^' bitand_oper_exp",
"bitor_oper_exp : bitxor_oper_exp",
"bitor_oper_exp : bitor_oper_exp '|' bitxor_oper_exp",
"and_oper_exp : bitor_oper_exp",
"and_oper_exp : and_oper_exp LAND bitor_oper_exp",
"or_oper_exp : and_oper_exp",
"or_oper_exp : or_oper_exp LOR and_oper_exp",
"cond_exp : or_oper_exp",
"$$19 :",
"$$20 :",
"cond_exp : or_oper_exp '?' $$19 list_exp ':' $$20 cond_exp",
"exp : cond_exp",
"exp : cond_exp '=' exp",
"exp : cond_exp PLUS_EQ exp",
"exp : cond_exp MIN_EQ exp",
"exp : cond_exp MULT_EQ exp",
"exp : cond_exp DIV_EQ exp",
"exp : cond_exp MOD_EQ exp",
"exp : cond_exp LSHIFT_EQ exp",
"exp : cond_exp RSHIFT_EQ exp",
"exp : cond_exp AND_EQ exp",
"exp : cond_exp XOR_EQ exp",
"exp : cond_exp OR_EQ exp",
"list_exp : exp",
"list_exp : list_exp ',' exp",
"opt_list_exp :",
"opt_list_exp : list_exp",
"f_list_exp : list_exp",
"f_opt_list_exp : opt_list_exp",
"arg_list : exp",
"arg_list : arg_list ',' exp",
"opt_arg_list :",
"opt_arg_list : arg_list",
"opt_arg_list : arg_list ELLIPSIS",
"opt_arg_list_comma :",
"opt_arg_list_comma : arg_list",
"opt_arg_list_comma : arg_list ','",
"assoc_exp : exp ':' exp",
"assoc_arg_list : assoc_exp",
"assoc_arg_list : assoc_arg_list ',' assoc_exp",
"opt_assoc_arg_list_comma :",
"opt_assoc_arg_list_comma : assoc_arg_list",
"opt_assoc_arg_list_comma : assoc_arg_list ','",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH 10000
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
#define yysslim (&yyss[YYSTACKSIZE - 1])
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 958 "parser.y"

/*
 * NAME:	t_void()
 * DESCRIPTION:	if the argument is of type void, an error will result
 */
static void t_void(node *n)
{
    if (n != (node *) NULL && n->mod == T_VOID) {
	c_error("void value not ignored");
	n->mod = T_MIXED;
    }
}

/*
 * NAME:	t_unary()
 * DESCRIPTION:	typecheck the argument of a unary operator
 */
static bool t_unary(node *n, const char *name)
{
    char tnbuf[TNBUFSIZE];

    t_void(n);
    if (typechecking && !T_ARITHMETIC(n->mod) && n->mod != T_MIXED) {
	c_error("bad argument type for %s (%s)", name,
		i_typename(tnbuf, n->mod));
	n->mod = T_MIXED;
	return FALSE;
    }
    return TRUE;
}

/*
 * NAME:	postfix()
 * DESCRIPTION:	handle a postfix assignment operator
 */
static node *postfix(int op, node *n, const char *name)
{
    t_unary(n, name);
    return node_mon((n->mod == T_INT) ? op + 1 : op, n->mod, c_lvalue(n, name));
}

/*
 * NAME:	prefix()
 * DESCRIPTION:	handle a prefix assignment operator
 */
static node *prefix(int op, node *n, const char *name)
{
    unsigned short type;

    if (n->mod == T_OBJECT || n->mod == T_CLASS) {
	type = T_OBJECT;
    } else {
	t_unary(n, name);
	type = n->mod;
    }
    return node_mon(op, type, c_lvalue(n, name));
}

/*
 * NAME:	cast()
 * DESCRIPTION:	cast an expression to a type
 */
static node *cast(node *n, node *type)
{
    Float flt;
    Int i;
    char *p, buffer[18];

    if (type->mod != n->mod) {
	switch (type->mod) {
	case T_INT:
	    switch (n->type) {
	    case N_FLOAT:
		/* cast float constant to int */
		NFLT_GET(n, flt);
		return node_int(flt.ftoi());

	    case N_STR:
		/* cast string to int */
		p = n->l.string->text;
		i = strtoint(&p);
		if (p == n->l.string->text + n->l.string->len) {
		    return node_int(i);
		} else {
		    c_error("cast of invalid string constant");
		    n->mod = T_MIXED;
		}
		break;

	    case N_TOFLOAT:
	    case N_TOSTRING:
		if (n->l.left->type == N_INT) {
		    /* (int) (float) i, (int) (string) i */
		    return n->l.left;
		}
		/* fall through */
	    default:
		if (n->mod == T_FLOAT || n->mod == T_STRING ||
		    n->mod == T_MIXED) {
		    return node_mon(N_TOINT, T_INT, n);
		}
		break;
	    }
	    break;

	case T_FLOAT:
	    switch (n->type) {
	    case N_INT:
		/* cast int constant to float */
		Float::itof(n->l.number, &flt);
		return node_float(&flt);

	    case N_STR:
		/* cast string to float */
		p = n->l.string->text;
		if (Float::atof(&p, &flt) &&
		    p == n->l.string->text + n->l.string->len) {
		    return node_float(&flt);
		} else {
		    yyerror("cast of invalid string constant");
		    n->mod = T_MIXED;
		}
		break;

	    case N_TOSTRING:
		if (n->l.left->mod == T_INT) {
		    return node_mon(N_TOFLOAT, T_FLOAT, n->l.left);
		}
		/* fall through */
	    default:
		if (n->mod == T_INT || n->mod == T_STRING || n->mod == T_MIXED)
		{
		    return node_mon(N_TOFLOAT, T_FLOAT, n);
		}
		break;
	    }
	    break;

	case T_STRING:
	    switch (n->type) {
	    case N_INT:
		/* cast int constant to string */
		sprintf(buffer, "%ld", (long) n->l.number);
		return node_str(str_new(buffer, (long) strlen(buffer)));

	    case N_FLOAT:
		/* cast float constant to string */
		NFLT_GET(n, flt);
		flt.ftoa(buffer);
		return node_str(str_new(buffer, (long) strlen(buffer)));

	    default:
		if (n->mod == T_INT || n->mod == T_FLOAT || n->mod == T_MIXED) {
		    return node_mon(N_TOSTRING, T_STRING, n);
		}
		break;
	    }
	    break;
	}

	if (type->mod == T_MIXED || (type->mod & T_TYPE) == T_VOID) {
	    /* (mixed), (void), (void *) */
	    c_error("cannot cast to %s", i_typename(buffer, type->mod));
	    n->mod = T_MIXED;
	} else if ((type->mod & T_REF) < (n->mod & T_REF)) {
	    /* (mixed *) of (mixed **) */
	    c_error("illegal cast of array type (%s)",
		    i_typename(buffer, n->mod));
	} else if ((n->mod & T_TYPE) != T_MIXED &&
		   ((type->mod & T_TYPE) != T_CLASS ||
		    ((n->mod & T_TYPE) != T_OBJECT &&
		     (n->mod & T_TYPE) != T_CLASS) ||
		    (type->mod & T_REF) != (n->mod & T_REF))) {
	    /* can only cast from mixed, or object/class to class */
	    c_error("cast of invalid type (%s)", i_typename(buffer, n->mod));
	} else {
	    if ((type->mod & T_REF) == 0 || (n->mod & T_REF) == 0) {
		/* runtime cast */
		n = node_mon(N_CAST, type->mod, n);
	    } else {
		n->mod = type->mod;
	    }
	    n->sclass = type->sclass;
	    if (n->sclass != (String *) NULL) {
		str_ref(n->sclass);
	    }
	}
    } else if (type->mod == T_CLASS && str_cmp(type->sclass, n->sclass) != 0) {
	/*
	 * cast to different object class
	 */
	n = node_mon(N_CAST, type->mod, n);
	n->sclass = type->sclass;
	if (n->sclass != (String *) NULL) {
	    str_ref(n->sclass);
	}
    }
    return n;
}

/*
 * NAME:	idx()
 * DESCRIPTION:	handle the [ ] operator
 */
static node *idx(node *n1, node *n2)
{
    char tnbuf[TNBUFSIZE];
    unsigned short type;

    if (n1->type == N_STR && n2->type == N_INT) {
	/* str [ int ] */
	if (n2->l.number < 0 || n2->l.number >= (Int) n1->l.string->len) {
	    c_error("string index out of range");
	} else {
	    n2->l.number =
		    UCHAR(n1->l.string->text[str_index(n1->l.string,
						       (long) n2->l.number)]);
	}
	return n2;
    }

    if ((n1->mod & T_REF) != 0) {
	/*
	 * array
	 */
	if (typechecking) {
	    type = n1->mod - (1 << REFSHIFT);
	    if (n2->mod != T_INT && n2->mod != T_MIXED) {
		c_error("bad index type (%s)", i_typename(tnbuf, n2->mod));
	    }
	    if (type != T_MIXED) {
		/* you can't trust these arrays */
		n2 = node_mon(N_CAST, type, node_bin(N_INDEX, type, n1, n2));
		n2->sclass = n1->sclass;
		if (n2->sclass != (String *) NULL) {
		    str_ref(n2->sclass);
		}
		return n2;
	    }
	}
	type = T_MIXED;
    } else if (n1->mod == T_STRING) {
	/*
	 * string
	 */
	if (typechecking && n2->mod != T_INT && n2->mod != T_MIXED) {
	    c_error("bad index type (%s)", i_typename(tnbuf, n2->mod));
	}
	type = T_INT;
    } else {
	if (typechecking && n1->mod != T_OBJECT && n1->mod != T_CLASS &&
	    n1->mod != T_MAPPING && n1->mod != T_MIXED) {
	    c_error("bad indexed type (%s)", i_typename(tnbuf, n1->mod));
	}
	type = T_MIXED;
    }
    return node_bin(N_INDEX, type, n1, n2);
}

/*
 * NAME:	range()
 * DESCRIPTION:	handle the [ .. ] operator
 */
static node *range(node *n1, node *n2, node *n3)
{
    unsigned short type;

    if (n1->type == N_STR && (n2 == (node *) NULL || n2->type == N_INT) &&
	(n3 == (node *) NULL || n3->type == N_INT)) {
	Int from, to;

	/* str [ int .. int ] */
	from = (n2 == (node *) NULL) ? 0 : n2->l.number;
	to = (n3 == (node *) NULL) ? n1->l.string->len - 1 : n3->l.number;
	if (from < 0 || from > to + 1 || to >= n1->l.string->len) {
	    c_error("invalid string range");
	} else {
	    return node_str(str_range(n1->l.string, (long) from, (long) to));
	}
    }

    type = T_MIXED;
    if (n1->mod == T_OBJECT || n1->mod == T_CLASS) {
	type = T_OBJECT;
    } else if (n1->mod == T_MAPPING) {
	type = T_MAPPING;
    } else if (typechecking && n1->mod != T_MIXED) {
	char tnbuf[TNBUFSIZE];

	/* indices */
	if (n2 != (node *) NULL && n2->mod != T_INT && n2->mod != T_MIXED) {
	    c_error("bad index type (%s)", i_typename(tnbuf, n2->mod));
	}
	if (n3 != (node *) NULL && n3->mod != T_INT && n3->mod != T_MIXED) {
	    c_error("bad index type (%s)", i_typename(tnbuf, n3->mod));
	}
	/* range */
	if ((n1->mod & T_REF) == 0 && n1->mod != T_STRING && n1->mod != T_MIXED)
	{
	    c_error("bad indexed type (%s)", i_typename(tnbuf, n1->mod));
	}
	type = n1->mod;
    }

    return node_bin(N_RANGE, type, n1, node_bin(N_PAIR, 0, n2, n3));
}

/*
 * NAME:	bini()
 * DESCRIPTION:	handle a binary int operator
 */
static node *bini(int op, node *n1, node *n2, const char *name)
{
    char tnbuf1[TNBUFSIZE], tnbuf2[TNBUFSIZE];
    unsigned short type;

    t_void(n1);
    t_void(n2);

    type = T_MIXED;
    if (n1->mod == T_OBJECT || n1->mod == T_CLASS) {
	type = T_OBJECT;
    } else if (n1->mod == T_INT && (n2->mod == T_INT || n2->mod == T_MIXED)) {
	type = T_INT;
    } else if (typechecking && n1->mod != T_MIXED) {
	c_error("bad argument types for %s (%s, %s)", name,
		i_typename(tnbuf1, n1->mod), i_typename(tnbuf2, n2->mod));
    }
    if (n1->mod == T_INT && n2->mod == T_INT) {
	op++;
    }
    return node_bin(op, type, n1, n2);
}


/*
 * NAME:	bina()
 * DESCRIPTION:	handle a binary arithmetic operator
 */
static node *bina(int op, node *n1, node *n2, const char *name)
{
    char tnbuf1[TNBUFSIZE], tnbuf2[TNBUFSIZE];
    unsigned short type;

    t_void(n1);
    t_void(n2);

    type = T_MIXED;
    if (n1->mod == T_OBJECT || n1->mod == T_CLASS) {
	type = T_OBJECT;
    } else if (n1->mod == T_INT && (n2->mod == T_INT || n2->mod == T_MIXED)) {
	if (n1->mod == T_INT && n2->mod == T_INT) {
	    op++;
	}
	type = T_INT;
    } else if (n1->mod == T_FLOAT && (n2->mod == T_FLOAT || n2->mod == T_MIXED))
    {
	type = T_FLOAT;
	switch(op) {
	    case N_ADD:
	    case N_ADD_EQ:
	    case N_ADD_EQ_1:
	    case N_DIV:
	    case N_DIV_EQ:
	    case N_EQ:
	    case N_GE:
	    case N_GT:
	    case N_LE:
	    case N_LT:
	    case N_MULT:
	    case N_MULT_EQ:
	    case N_NE:
	    case N_SUB_EQ_1:
	    case N_SUB_EQ:
	    case N_MIN_MIN:
	    case N_PLUS_PLUS:
		op+=2;
		break;
	    default:
		break;
	}
    } else if (typechecking && n1->mod != T_MIXED) {
	c_error("bad argument types for %s (%s, %s)", name,
		i_typename(tnbuf1, n1->mod), i_typename(tnbuf2, n2->mod));
    }

    return node_bin(op, type, n1, n2);
}

/*
 * NAME:	mult()
 * DESCRIPTION:	handle the * *= operators
 */
static node *mult(int op, node *n1, node *n2, const char *name)
{
    Float f1, f2;

    if (n1->type == N_INT && n2->type == N_INT) {
	/* i * i */
	n1->l.number *= n2->l.number;
	return n1;
    }
    if (n1->type == N_FLOAT && n2->type == N_FLOAT) {
	NFLT_GET(n1, f1);
	NFLT_GET(n2, f2);
	f1.mult(f2);
	NFLT_PUT(n1, f1);
	return n1;
    }
    return bina(op, n1, n2, name);
}

/*
 * NAME:	mdiv()
 * DESCRIPTION:	handle the / /= operators
 */
static node *mdiv(int op, node *n1, node *n2, const char *name)
{
    Float f1, f2;

    if (n1->type == N_INT && n2->type == N_INT) {
	Int i, d;

	/* i / i */
	i = n1->l.number;
	d = n2->l.number;
	if (d == 0) {
	    /* i / 0 */
	    c_error("division by zero");
	    return n1;
	}
	n1->l.number = i / d;
	return n1;
    } else if (n1->type == N_FLOAT && n2->type == N_FLOAT) {
	/* f / f */
	if (NFLT_ISZERO(n2)) {
	    /* f / 0.0 */
	    c_error("division by zero");
	    return n1;
	}
	NFLT_GET(n1, f1);
	NFLT_GET(n2, f2);
	f1.div(f2);
	NFLT_PUT(n1, f1);
	return n1;
    }

    return bina(op, n1, n2, name);
}

/*
 * NAME:	mod()
 * DESCRIPTION:	handle the % %= operators
 */
static node *mod(int op, node *n1, node *n2, const char *name)
{
    if (n1->type == N_INT && n2->type == N_INT) {
	Int i, d;

	/* i % i */
	i = n1->l.number;
	d = n2->l.number;
	if (d == 0) {
	    /* i % 0 */
	    c_error("modulus by zero");
	    return n1;
	}
	n1->l.number = i % d;
	return n1;
    }

    return bini(op, n1, n2, name);
}

/*
 * NAME:	add()
 * DESCRIPTION:	handle the + += operators, possibly rearranging the order
 *		of the expression
 */
static node *add(int op, node *n1, node *n2, const char *name)
{
    char tnbuf1[TNBUFSIZE], tnbuf2[TNBUFSIZE];
    Float f1, f2;
    unsigned short type;

    t_void(n1);
    t_void(n2);

    if (n1->mod == T_STRING) {
	if (n2->mod == T_INT || n2->mod == T_FLOAT ||
	    (n2->mod == T_MIXED && typechecking)) {
	    n2 = cast(n2, node_type(T_STRING, (String *) NULL));
	}
    } else if (n2->mod == T_STRING && op == N_ADD) {
	if (n1->mod == T_INT || n1->mod == T_FLOAT) {
	    n1 = cast(n1, node_type(T_STRING, (String *) NULL));
	}
    }

    if (n1->type == N_INT && n2->type == N_INT) {
	/* i + i */
	n1->l.number += n2->l.number;
	return n1;
    }
    if (n1->type == N_FLOAT && n2->type == N_FLOAT) {
	/* f + f */
	NFLT_GET(n1, f1);
	NFLT_GET(n2, f2);
	f1.add(f2);
	NFLT_PUT(n1, f1);
	return n1;
    }
    if (n1->type == N_STR && n2->type == N_STR) {
	/* s + s */
	return node_str(str_add(n1->l.string, n2->l.string));
    }

    if (n1->mod == T_OBJECT || n1->mod == T_CLASS) {
	type = T_OBJECT;
    } else if ((type=c_tmatch(n1->mod, n2->mod)) == T_NIL) {
	type = T_MIXED;
	if (typechecking) {
	    c_error("bad argument types for %s (%s, %s)", name,
		    i_typename(tnbuf1, n1->mod), i_typename(tnbuf2, n2->mod));
	}
    } else if (type == T_INT) {
	op++;
    } else if (op == N_ADD_EQ && n1->mod != n2->mod) {
	type = n1->mod;
	if (n1->mod == T_INT) {
	    n2 = node_mon(N_CAST, T_INT, n2);
	    type = T_INT;
	    op++;
	} else if (n1->mod == T_FLOAT) {
	    n2 = node_mon(N_CAST, T_FLOAT, n2);
	    type = T_FLOAT;
	}
    }
    return node_bin(op, type, n1, n2);
}

/*
 * NAME:	sub()
 * DESCRIPTION:	handle the - -= operators
 */
static node *sub(int op, node *n1, node *n2, const char *name)
{
    char tnbuf1[TNBUFSIZE], tnbuf2[TNBUFSIZE];
    Float f1, f2;
    unsigned short type;

    t_void(n1);
    t_void(n2);

    if (n1->type == N_INT && n2->type == N_INT) {
	/* i - i */
	n1->l.number -= n2->l.number;
	return n1;
    }
    if (n1->type == N_FLOAT && n2->type == N_FLOAT) {
	/* f - f */
	NFLT_GET(n1, f1);
	NFLT_GET(n2, f2);
	f1.sub(f2);
	NFLT_PUT(n1, f1);
	return n1;
    }

    if (n1->mod == T_OBJECT || n1->mod == T_CLASS) {
	type = T_OBJECT;
    } else if ((type=c_tmatch(n1->mod, n2->mod)) == T_NIL || type == T_STRING ||
	       type == T_MAPPING) {
	if ((type=n1->mod) != T_MAPPING ||
	    (n2->mod != T_MIXED && (n2->mod & T_REF) == 0)) {
	    type = T_MIXED;
	    if (typechecking) {
		c_error("bad argument types for %s (%s, %s)", name,
			i_typename(tnbuf1, n1->mod),
			i_typename(tnbuf2, n2->mod));
	    }
	}
    } else if (type == T_INT) {
	op++;
    } else if (type == T_MIXED) {
	type = n1->mod;
    } else if (n1->mod == T_MIXED && (n2->mod & T_REF)) {
	type = T_MIXED;
    }
    return node_bin(op, type, n1, n2);
}

/*
 * NAME:	umin()
 * DESCRIPTION:	handle unary minus
 */
static node *umin(node *n)
{
    Float flt;

    if (n->mod == T_OBJECT || n->mod == T_CLASS) {
	return node_mon(N_UMIN, T_OBJECT, n);
    } else if (n->mod == T_MIXED) {
	return node_mon(N_UMIN, T_MIXED, n);
    } else if (t_unary(n, "unary -")) {
	if (n->mod == T_FLOAT) {
	    flt.initZero();
	    n = sub(N_SUB, node_float(&flt), n, "-");
	} else {
	    n = sub(N_SUB, node_int((Int) 0), n, "-");
	}
    }
    return n;
}

/*
 * NAME:	lshift()
 * DESCRIPTION:	handle the << <<= operators
 */
static node *lshift(int op, node *n1, node *n2, const char *name)
{
    if (n2->type == N_INT) {
	if (n2->l.number < 0) {
	    c_error("negative left shift");
	    n2->l.number = 0;
	}
	if (n1->type == N_INT) {
	    /* i << i */
	    n1->l.number = (n2->l.number < 32) ?
			    (Uint) n1->l.number << n2->l.number : 0;
	    return n1;
	}
    }

    return bini(op, n1, n2, name);
}

/*
 * NAME:	rshift()
 * DESCRIPTION:	handle the >> >>= operators
 */
static node *rshift(int op, node *n1, node *n2, const char *name)
{
    if (n2->type == N_INT) {
	if (n2->l.number < 0) {
	    c_error("negative right shift");
	    n2->l.number = 0;
	}
	if (n1->type == N_INT) {
	    /* i >> i */
	    n1->l.number = (n2->l.number < 32) ?
			    (Uint) n1->l.number >> n2->l.number : 0;
	    return n1;
	}
    }

    return bini(op, n1, n2, name);
}

/*
 * NAME:	rel()
 * DESCRIPTION:	handle the < > <= >= operators
 */
static node *rel(int op, node *n1, node *n2, const char *name)
{
    char tnbuf1[TNBUFSIZE], tnbuf2[TNBUFSIZE];

    t_void(n1);
    t_void(n2);

    if (n1->type == N_INT && n2->type == N_INT) {
	/* i . i */
	switch (op) {
	case N_GE:
	    n1->l.number = (n1->l.number >= n2->l.number);
	    break;

	case N_GT:
	    n1->l.number = (n1->l.number > n2->l.number);
	    break;

	case N_LE:
	    n1->l.number = (n1->l.number <= n2->l.number);
	    break;

	case N_LT:
	    n1->l.number = (n1->l.number < n2->l.number);
	    break;
	}
	return n1;
    }
    if (n1->type == N_FLOAT && n2->type == N_FLOAT) {
	Float f1, f2;

	/* f . f */
	NFLT_GET(n1, f1);
	NFLT_GET(n2, f2);

	switch (op) {
	case N_GE:
	    return node_int((Int) (f1.cmp(f2) >= 0));

	case N_GT:
	    return node_int((Int) (f1.cmp(f2) > 0));

	case N_LE:
	    return node_int((Int) (f1.cmp(f2) <= 0));

	case N_LT:
	    return node_int((Int) (f1.cmp(f2) < 0));
	}
	return n1;
    }
    if (n1->type == N_STR && n2->type == N_STR) {
	/* s . s */
	switch (op) {
	case N_GE:
	    return node_int((Int) (str_cmp(n1->l.string, n2->l.string) >= 0));

	case N_GT:
	    return node_int((Int) (str_cmp(n1->l.string, n2->l.string) > 0));

	case N_LE:
	    return node_int((Int) (str_cmp(n1->l.string, n2->l.string) <= 0));

	case N_LT:
	    return node_int((Int) (str_cmp(n1->l.string, n2->l.string) < 0));
	}
    }

    if (n1->mod != T_OBJECT && n1->mod != T_CLASS && n1->mod != T_MIXED &&
	typechecking &&
	((n1->mod != n2->mod && n2->mod != T_MIXED) || !T_ARITHSTR(n1->mod) ||
	 (!T_ARITHSTR(n2->mod) && n2->mod != T_MIXED))) {
	c_error("bad argument types for %s (%s, %s)", name,
		i_typename(tnbuf1, n1->mod), i_typename(tnbuf2, n2->mod));
    } else if (n1->mod == T_INT && n2->mod == T_INT) {
	op++;
    }
    return node_bin(op, T_INT, n1, n2);
}

/*
 * NAME:	eq()
 * DESCRIPTION:	handle the == operator
 */
static node *eq(node *n1, node *n2)
{
    char tnbuf1[TNBUFSIZE], tnbuf2[TNBUFSIZE];
    Float f1, f2;
    int op;

    t_void(n1);
    t_void(n2);

    switch (n1->type) {
    case N_INT:
	if (n2->type == N_INT) {
	    /* i == i */
	    n1->l.number = (n1->l.number == n2->l.number);
	    return n1;
	}
	if (nil_node == N_INT && n1->l.number == 0 && n2->type == N_STR) {
	    /* nil == str */
	    return node_int((Int) FALSE);
	}
	break;

    case N_FLOAT:
	if (n2->type == N_FLOAT) {
	    /* f == f */
	    NFLT_GET(n1, f1);
	    NFLT_GET(n2, f2);
	    return node_int((Int) (f1.cmp(f2) == 0));
	}
	break;

    case N_STR:
	if (n2->type == N_STR) {
	    /* s == s */
	    return node_int((Int) (str_cmp(n1->l.string, n2->l.string) == 0));
	}
	if (n2->type == nil_node && n2->l.number == 0) {
	    /* s == nil */
	    return node_int((Int) FALSE);
	}
	break;

    case N_NIL:
	if (n2->type == N_NIL) {
	    /* nil == nil */
	    return node_int((Int) TRUE);
	}
	if (n2->type == N_STR) {
	    /* nil == str */
	    return node_int((Int) FALSE);
	}
	break;
    }

    op = N_EQ;
    if (c_tmatch(n1->mod, n2->mod) == T_NIL &&
	(!c_nil(n1) || !T_POINTER(n2->mod)) &&
	(!c_nil(n2) || !T_POINTER(n1->mod))) {
	if (typechecking) {
	    c_error("incompatible types for equality (%s, %s)",
		    i_typename(tnbuf1, n1->mod), i_typename(tnbuf2, n2->mod));
	}
    } else if (n1->mod == T_INT && n2->mod == T_INT) {
	op++;
    }
    return node_bin(op, T_INT, n1, n2);
}

/*
 * NAME:	_and()
 * DESCRIPTION:	handle the & &= operators
 */
static node *_and(int op, node *n1, node *n2, const char *name)
{
    unsigned short type;

    if (n1->type == N_INT && n2->type == N_INT) {
	/* i & i */
	n1->l.number &= n2->l.number;
	return n1;
    }
    if ((((type=n1->mod) == T_MIXED || type == T_MAPPING) &&
	 ((n2->mod & T_REF) != 0 || n2->mod == T_MIXED)) ||
	((type=c_tmatch(n1->mod, n2->mod)) & T_REF) != T_NIL) {
	/*
	 * possibly array & array or mapping & array
	 */
	return node_bin(op, type, n1, n2);
    }
    return bini(op, n1, n2, name);
}

/*
 * NAME:	_xor()
 * DESCRIPTION:	handle the ^ ^= operators
 */
static node *_xor(int op, node *n1, node *n2, const char *name)
{
    unsigned short type;

    if (n1->type == N_INT && n2->type == N_INT) {
	/* i ^ i */
	n1->l.number ^= n2->l.number;
	return n1;
    }
    if (((type=n1->mod) == T_MIXED && n2->mod == T_MIXED) ||
	((type=c_tmatch(n1->mod, n2->mod)) & T_REF) != T_NIL) {
	/*
	 * possibly array ^ array
	 */
	return node_bin(op, type, n1, n2);
    }
    return bini(op, n1, n2, name);
}

/*
 * NAME:	_or()
 * DESCRIPTION:	handle the | |= operators
 */
static node *_or(int op, node *n1, node *n2, const char *name)
{
    unsigned short type;

    if (n1->type == N_INT && n2->type == N_INT) {
	/* i | i */
	n1->l.number |= n2->l.number;
	return n1;
    }
    if (((type=n1->mod) == T_MIXED && n2->mod == T_MIXED) ||
	((type=c_tmatch(n1->mod, n2->mod)) & T_REF) != T_NIL) {
	/*
	 * possibly array | array
	 */
	return node_bin(op, type, n1, n2);
    }
    return bini(op, n1, n2, name);
}

/*
 * NAME:	land()
 * DESCRIPTION:	handle the && operator
 */
static node *land(node *n1, node *n2)
{
    t_void(n1);
    t_void(n2);

    if ((n1->flags & F_CONST) && (n2->flags & F_CONST)) {
	n1 = c_tst(n1);
	n2 = c_tst(n2);
	n1->l.number &= n2->l.number;
	return n1;
    }

    return node_bin(N_LAND, T_INT, n1, n2);
}

/*
 * NAME:	lor()
 * DESCRIPTION:	handle the || operator
 */
static node *lor(node *n1, node *n2)
{
    t_void(n1);
    t_void(n2);

    if ((n1->flags & F_CONST) && (n2->flags & F_CONST)) {
	n1 = c_tst(n1);
	n2 = c_tst(n2);
	n1->l.number |= n2->l.number;
	return n1;
    }

    return node_bin(N_LOR, T_INT, n1, n2);
}

/*
 * NAME:	quest()
 * DESCRIPTION:	handle the ? : operator
 */
static node *quest(node *n1, node *n2, node *n3)
{
    unsigned short type;

    t_void(n1);

    if ((n2->flags & F_CONST) && n3->type == n2->type) {
	switch (n1->type) {
	case N_INT:
	    return (n1->l.number == 0) ? n3 : n2;

	case N_FLOAT:
	    return (NFLT_ISZERO(n1)) ? n3 : n2;

	case N_STR:
	    return n2;

	case N_NIL:
	    return n3;
	}
    }

    type = T_MIXED;
    if (c_nil(n2) && T_POINTER(n3->mod)) {
	/*
	 * expr ? nil : expr
	 */
	type = n3->mod;
    } else if (c_nil(n3) && T_POINTER(n2->mod)) {
	/*
	 * expr ? expr : nil;
	 */
	type = n2->mod;
    } else if (typechecking) {
	/*
	 * typechecked
	 */
	if (n2->mod == T_VOID || n3->mod == T_VOID) {
	    /* result can never be used */
	    type = T_VOID;
	} else {
	    type = c_tmatch(n2->mod, n3->mod);
	    if (type == T_NIL) {
		/* no typechecking here, just let the result be mixed */
		type = T_MIXED;
	    }
	}
    }

    n1 = node_bin(N_QUEST, type, n1, node_bin(N_PAIR, 0, n2, n3));
    if ((type & T_TYPE) == T_CLASS) {
	if (n2->sclass == (String *) NULL) {
	    n1->sclass = n3->sclass;
	    if (n1->sclass != (String *) NULL) {
		str_ref(n1->sclass);
	    }
	} else if (n3->sclass == (String *) NULL ||
		   str_cmp(n2->sclass, n3->sclass) == 0) {
	    n1->sclass = n2->sclass;
	    if (n1->sclass != (String *) NULL) {
		str_ref(n1->sclass);
	    }
	} else {
	    /* downgrade to object */
	    n1->type = (n1->type & T_REF) | T_OBJECT;
	}
    }
    return n1;
}

/*
 * NAME:	assign()
 * DESCRIPTION:	handle the assignment operator
 */
static node *assign(node *n1, node *n2)
{
    char tnbuf1[TNBUFSIZE], tnbuf2[TNBUFSIZE];
    node *n, *m;
    unsigned short type;

    if (n1->type == N_AGGR) {
	/*
	 * ({ a, b }) = array;
	 */
	if (typechecking) {
	    type = n2->mod;
	    if ((n2->mod & T_REF) != 0) {
		type -= 1 << REFSHIFT;
		if (type != T_MIXED) {
		    n = node_mon(N_TYPE, type, (node *) NULL);
		    n->sclass = n2->sclass;
		    if (n->sclass != (String *) NULL) {
			str_ref(n->sclass);
		    }
		    n1->r.right = n;
		}
	    } else if (type != T_MIXED) {
		c_error("incompatible types for = (%s, %s)",
			i_typename(tnbuf1, n1->mod),
			i_typename(tnbuf2, type));
		type = T_MIXED;
	    }

	    n = n1->l.left;
	    while (n != (node *) NULL) {
		if (n->type == N_PAIR) {
		    m = n->l.left;
		    n = n->r.right;
		} else {
		    m = n;
		    n = (node *) NULL;
		}
		if (c_tmatch(m->mod, type) == T_NIL) {
		    c_error("incompatible types for = (%s, %s)",
			    i_typename(tnbuf1, m->mod),
			    i_typename(tnbuf2, type));
		}
	    }
	}
	n1 = node_bin(N_ASSIGN, n2->mod, n1, n2);
	n1->sclass = n2->sclass;
	if (n1->sclass != (String *) NULL) {
	    str_ref(n1->sclass);
	}
	return n1;
    } else {
	if (typechecking && (!c_nil(n2) || !T_POINTER(n1->mod))) {
	    /*
	     * typechecked
	     */
	    if (c_tmatch(n1->mod, n2->mod) == T_NIL) {
		c_error("incompatible types for = (%s, %s)",
			i_typename(tnbuf1, n1->mod),
			i_typename(tnbuf2, n2->mod));
	    } else if ((n1->mod != T_MIXED && n2->mod == T_MIXED) ||
		       (n1->mod == T_CLASS &&
			(n2->mod != T_CLASS ||
			 str_cmp(n1->sclass, n2->sclass) != 0))) {
		n2 = node_mon(N_CAST, n1->mod, n2);
		n2->sclass = n1->sclass;
		if (n2->sclass != (String *) NULL) {
		    str_ref(n2->sclass);
		}
	    }
	}

	n2 = node_bin(N_ASSIGN, n1->mod, n1, n2);
	n2->sclass = n1->sclass;
	if (n2->sclass != (String *) NULL) {
	    str_ref(n2->sclass);
	}
	return n2;
    }
}

/*
 * NAME:	comma()
 * DESCRIPTION:	handle the comma operator, rearranging the order of the
 *		expression if needed
 */
static node *comma(node *n1, node *n2)
{
    if (n2->type == N_COMMA) {
	/* a, (b, c) --> (a, b), c */
	n2->l.left = comma(n1, n2->l.left);
	return n2;
    } else {
	n1 = node_bin(N_COMMA, n2->mod, n1, n2);
	n1->sclass = n2->sclass;
	    if (n1->sclass != (String *) NULL) {
		str_ref(n1->sclass);
	    }
	return n1;
    }
}
#line 2293 "y.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yysslim)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yysslim)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 132 "parser.y"
{
		  nerrors = 0;
		  ndeclarations = 0;
		}
break;
case 2:
#line 137 "parser.y"
{
		  if (nerrors > 0) {
		      YYABORT;
		  }
		}
break;
case 4:
#line 147 "parser.y"
{
		  if (nerrors > 0) {
		      YYABORT;
		  }
		}
break;
case 5:
#line 156 "parser.y"
{
		  if (ndeclarations > 0) {
		      c_error("inherit must precede all declarations");
		  } else if (nerrors > 0 ||
			     !c_inherit(yyvsp[-1].node->l.string->text, yyvsp[-3].node, yyvsp[-5].type != 0)) {
		      /*
		       * The object to be inherited may have been compiled;
		       * abort this compilation and possibly restart later.
		       */
		      YYABORT;
		  }
		}
break;
case 6:
#line 169 "parser.y"
{ ndeclarations++; }
break;
case 7:
#line 171 "parser.y"
{ ndeclarations++; }
break;
case 8:
#line 176 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 10:
#line 182 "parser.y"
{ yyval.node = node_str(str_new(yytext, (long) yyleng)); }
break;
case 12:
#line 188 "parser.y"
{ yyval.node = node_str(str_add(yyvsp[-2].node->l.string, yyvsp[0].node->l.string)); }
break;
case 14:
#line 194 "parser.y"
{ yyval.node = yyvsp[-1].node; }
break;
case 15:
#line 199 "parser.y"
{ yyval.node = node_str(str_new(yytext, (long) yyleng)); }
break;
case 16:
#line 204 "parser.y"
{ c_global(yyvsp[-3].type, yyvsp[-2].node, yyvsp[-1].node); }
break;
case 17:
#line 209 "parser.y"
{
		  typechecking = TRUE;
		  c_function(yyvsp[-2].type, yyvsp[-1].node, yyvsp[0].node);
		}
break;
case 18:
#line 214 "parser.y"
{
		  if (nerrors == 0) {
		      c_funcbody(yyvsp[0].node);
		  }
		}
break;
case 19:
#line 220 "parser.y"
{
		  typechecking = c_typechecking();
		  c_function(yyvsp[-4].type, node_type((typechecking) ? T_VOID : T_NIL,
					   (String *) NULL),
			     node_bin(N_FUNC, 0, yyvsp[-3].node, yyvsp[-1].node));
		}
break;
case 20:
#line 227 "parser.y"
{
		  if (nerrors == 0) {
		      c_funcbody(yyvsp[0].node);
		  }
		}
break;
case 21:
#line 236 "parser.y"
{ c_local(yyvsp[-3].type, yyvsp[-2].node, yyvsp[-1].node); }
break;
case 22:
#line 241 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 23:
#line 242 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 25:
#line 245 "parser.y"
{
		  yyval.node = yyvsp[-1].node;
		  yyval.node->flags |= F_ELLIPSIS;
		}
break;
case 27:
#line 254 "parser.y"
{ yyval.node = node_bin(N_PAIR, 0, yyvsp[-2].node, yyvsp[0].node); }
break;
case 28:
#line 259 "parser.y"
{
		  yyval.node = yyvsp[0].node;
		  yyval.node->flags |= F_VARARGS;
		}
break;
case 30:
#line 268 "parser.y"
{
		  yyval.node = yyvsp[0].node;
		  yyval.node->mod |= yyvsp[-1].node->mod;
		  yyval.node->sclass = yyvsp[-1].node->sclass;
		  if (yyval.node->sclass != (String *) NULL) {
		      str_ref(yyval.node->sclass);
		  }
		}
break;
case 31:
#line 276 "parser.y"
{
		  yyval.node = yyvsp[0].node;
		  yyval.node->mod = T_NIL;	/* only if typechecking, though */
		}
break;
case 34:
#line 286 "parser.y"
{ yyval.type = yyvsp[-1].type | yyvsp[0].type; }
break;
case 36:
#line 292 "parser.y"
{ yyval.type = yyvsp[-1].type | yyvsp[0].type; }
break;
case 37:
#line 297 "parser.y"
{ yyval.type = C_STATIC | C_PRIVATE; }
break;
case 39:
#line 303 "parser.y"
{ yyval.type = 0; }
break;
case 40:
#line 305 "parser.y"
{ yyval.type = C_STATIC | C_PRIVATE; }
break;
case 41:
#line 310 "parser.y"
{ yyval.type = C_STATIC; }
break;
case 42:
#line 312 "parser.y"
{ yyval.type = C_ATOMIC; }
break;
case 43:
#line 314 "parser.y"
{ yyval.type = C_NOMASK; }
break;
case 44:
#line 316 "parser.y"
{ yyval.type = C_VARARGS; }
break;
case 45:
#line 320 "parser.y"
{ yyval.node = node_type(T_INT, (String *) NULL); }
break;
case 46:
#line 321 "parser.y"
{ yyval.node = node_type(T_FLOAT, (String *) NULL); }
break;
case 47:
#line 323 "parser.y"
{ yyval.node = node_type(T_STRING, (String *) NULL); }
break;
case 48:
#line 325 "parser.y"
{ yyval.node = node_type(T_OBJECT, (String *) NULL); }
break;
case 49:
#line 327 "parser.y"
{ yyval.node = node_type(T_CLASS, c_objecttype(yyvsp[0].node)); }
break;
case 50:
#line 329 "parser.y"
{ yyval.node = node_type(T_MAPPING, (String *) NULL); }
break;
case 51:
#line 331 "parser.y"
{
		  yyval.node = node_str(str_new("/" BIPREFIX "function",
					BIPREFIXLEN + 9));
		  yyval.node = node_type(T_CLASS, c_objecttype(yyval.node));
		}
break;
case 52:
#line 336 "parser.y"
{ yyval.node = node_type(T_MIXED, (String *) NULL); }
break;
case 53:
#line 337 "parser.y"
{ yyval.node = node_type(T_VOID, (String *) NULL); }
break;
case 56:
#line 347 "parser.y"
{ yyval.type = 0; }
break;
case 57:
#line 349 "parser.y"
{
		  yyval.type = yyvsp[-1].type + 1;
		  if (yyval.type == 1 << (8 - REFSHIFT)) {
		      c_error("too deep indirection");
		  }
		}
break;
case 58:
#line 359 "parser.y"
{
		  yyval.node = yyvsp[0].node;
		  yyval.node->mod = (yyvsp[-1].type << REFSHIFT) & T_REF;
		}
break;
case 59:
#line 367 "parser.y"
{ yyval.node = node_op("+"); }
break;
case 60:
#line 369 "parser.y"
{ yyval.node = node_op("-"); }
break;
case 61:
#line 371 "parser.y"
{ yyval.node = node_op("*"); }
break;
case 62:
#line 373 "parser.y"
{ yyval.node = node_op("/"); }
break;
case 63:
#line 375 "parser.y"
{ yyval.node = node_op("%"); }
break;
case 64:
#line 377 "parser.y"
{ yyval.node = node_op("&"); }
break;
case 65:
#line 379 "parser.y"
{ yyval.node = node_op("^"); }
break;
case 66:
#line 381 "parser.y"
{ yyval.node = node_op("|"); }
break;
case 67:
#line 383 "parser.y"
{ yyval.node = node_op("<"); }
break;
case 68:
#line 385 "parser.y"
{ yyval.node = node_op(">"); }
break;
case 69:
#line 387 "parser.y"
{ yyval.node = node_op("<="); }
break;
case 70:
#line 389 "parser.y"
{ yyval.node = node_op(">="); }
break;
case 71:
#line 391 "parser.y"
{ yyval.node = node_op("<<"); }
break;
case 72:
#line 393 "parser.y"
{ yyval.node = node_op(">>"); }
break;
case 73:
#line 395 "parser.y"
{ yyval.node = node_op("~"); }
break;
case 74:
#line 397 "parser.y"
{ yyval.node = node_op("++"); }
break;
case 75:
#line 399 "parser.y"
{ yyval.node = node_op("--"); }
break;
case 76:
#line 401 "parser.y"
{ yyval.node = node_op("[]"); }
break;
case 77:
#line 403 "parser.y"
{ yyval.node = node_op("[]="); }
break;
case 78:
#line 405 "parser.y"
{ yyval.node = node_op("[..]"); }
break;
case 81:
#line 415 "parser.y"
{ yyval.node = node_bin(N_FUNC, (yyvsp[-4].type << REFSHIFT) & T_REF, yyvsp[-3].node, yyvsp[-1].node); }
break;
case 85:
#line 426 "parser.y"
{ yyval.node = node_bin(N_PAIR, 0, yyvsp[-2].node, yyvsp[0].node); }
break;
case 86:
#line 431 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 87:
#line 433 "parser.y"
{ yyval.node = c_concat(yyvsp[-1].node, yyvsp[0].node); }
break;
case 88:
#line 438 "parser.y"
{
		  if (nstatements > 0) {
		      c_error("declaration after statement");
		  }
		  yyval.node = (node *) NULL;
		}
break;
case 89:
#line 444 "parser.y"
{
		  nstatements++;
		  yyval.node = yyvsp[0].node;
		}
break;
case 90:
#line 449 "parser.y"
{
		  if (nerrors >= MAX_ERRORS) {
		      YYABORT;
		  }
		  yyval.node = (node *) NULL;
		}
break;
case 91:
#line 459 "parser.y"
{ c_startcond(); }
break;
case 92:
#line 460 "parser.y"
{ yyval.node = c_if(yyvsp[-3].node, yyvsp[0].node); }
break;
case 93:
#line 465 "parser.y"
{ yyval.node = c_exp_stmt(yyvsp[-1].node); }
break;
case 95:
#line 468 "parser.y"
{
		  c_endcond();
		  yyval.node = c_endif(yyvsp[0].node, (node *) NULL);
		}
break;
case 96:
#line 474 "parser.y"
{ c_startcond2(); }
break;
case 97:
#line 476 "parser.y"
{
		  c_matchcond();
		  yyval.node = c_endif(yyvsp[-3].node, yyvsp[0].node);
		}
break;
case 98:
#line 480 "parser.y"
{ c_loop(); }
break;
case 99:
#line 482 "parser.y"
{ yyval.node = c_do(yyvsp[-2].node, yyvsp[-5].node); }
break;
case 100:
#line 484 "parser.y"
{
		  c_loop();
		  c_startcond();
		}
break;
case 101:
#line 488 "parser.y"
{
		  c_endcond();
		  yyval.node = c_while(yyvsp[-3].node, yyvsp[0].node);
		}
break;
case 102:
#line 493 "parser.y"
{
		  c_loop();
		  c_startcond();
		}
break;
case 103:
#line 497 "parser.y"
{
		  c_endcond();
		  yyval.node = c_for(c_exp_stmt(yyvsp[-7].node), yyvsp[-5].node, c_exp_stmt(yyvsp[-3].node), yyvsp[0].node);
		}
break;
case 104:
#line 502 "parser.y"
{
		  if (typechecking) {
		      char tnbuf[TNBUFSIZE];

		      if (yyvsp[-3].node->mod != T_INT && yyvsp[-3].node->mod != T_MIXED) {
			  c_error("bad type for stack rlimit (%s)",
				  i_typename(tnbuf, yyvsp[-3].node->mod));
		      }
		      if (yyvsp[-1].node->mod != T_INT && yyvsp[-1].node->mod != T_MIXED) {
			  c_error("bad type for ticks rlimit (%s)",
				  i_typename(tnbuf, yyvsp[-1].node->mod));
		      }
		  }
		  c_startrlimits();
		}
break;
case 105:
#line 518 "parser.y"
{ yyval.node = c_endrlimits(yyvsp[-5].node, yyvsp[-3].node, yyvsp[0].node); }
break;
case 106:
#line 519 "parser.y"
{
		  c_startcatch();
		  c_startcond();
		}
break;
case 107:
#line 524 "parser.y"
{
		  c_endcond();
		  c_endcatch();
		  c_startcond();
		}
break;
case 108:
#line 530 "parser.y"
{
		  c_endcond();
		  yyval.node = c_donecatch(yyvsp[-2].node, yyvsp[0].node);
		}
break;
case 109:
#line 535 "parser.y"
{
		  c_startswitch(yyvsp[-1].node, typechecking);
		  c_startcond();
		}
break;
case 110:
#line 540 "parser.y"
{
		  c_endcond();
		  yyval.node = c_endswitch(yyvsp[-3].node, yyvsp[0].node);
		}
break;
case 111:
#line 545 "parser.y"
{ yyvsp[-1].node = c_case(yyvsp[-1].node, (node *) NULL); }
break;
case 112:
#line 546 "parser.y"
{
		  yyval.node = yyvsp[-3].node;
		  if (yyval.node != (node *) NULL) {
		      yyval.node->l.left = yyvsp[0].node;
		  } else {
		      yyval.node = yyvsp[0].node;
		  }
		}
break;
case 113:
#line 555 "parser.y"
{ yyvsp[-3].node = c_case(yyvsp[-3].node, yyvsp[-1].node); }
break;
case 114:
#line 556 "parser.y"
{
		  yyval.node = yyvsp[-5].node;
		  if (yyval.node != (node *) NULL) {
		      yyval.node->l.left = yyvsp[0].node;
		  } else {
		      yyval.node = yyvsp[0].node;
		  }
		}
break;
case 115:
#line 565 "parser.y"
{ yyvsp[0].node = c_default(); }
break;
case 116:
#line 566 "parser.y"
{
		  yyval.node = yyvsp[-2].node;
		  if (yyval.node != (node *) NULL) {
		      yyval.node->l.left = yyvsp[0].node;
		  } else {
		      yyval.node = yyvsp[0].node;
		  }
		}
break;
case 117:
#line 575 "parser.y"
{ yyvsp[0].node = c_label(yyvsp[-1].node); }
break;
case 118:
#line 576 "parser.y"
{ yyval.node = c_concat(yyvsp[-2].node, yyvsp[0].node); }
break;
case 119:
#line 578 "parser.y"
{
		  yyval.node = c_goto(yyvsp[-1].node);
		}
break;
case 120:
#line 582 "parser.y"
{
		  yyval.node = c_break();
		}
break;
case 121:
#line 586 "parser.y"
{
		  yyval.node = c_continue();
		}
break;
case 122:
#line 590 "parser.y"
{ yyval.node = c_return(yyvsp[-1].node, typechecking); }
break;
case 123:
#line 591 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 124:
#line 595 "parser.y"
{
		  nstatements = 0;
		  c_startcompound();
		}
break;
case 125:
#line 600 "parser.y"
{
		  nstatements++;
		  yyval.node = c_endcompound(yyvsp[-1].node);
		}
break;
case 126:
#line 608 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 127:
#line 610 "parser.y"
{ yyval.node = yyvsp[0].node; }
break;
case 128:
#line 615 "parser.y"
{ yyval.node = c_flookup(yyvsp[0].node, typechecking); }
break;
case 129:
#line 617 "parser.y"
{ yyval.node = c_iflookup(yyvsp[0].node, (node *) NULL); }
break;
case 130:
#line 619 "parser.y"
{ yyval.node = c_iflookup(yyvsp[0].node, yyvsp[-2].node); }
break;
case 131:
#line 624 "parser.y"
{ yyval.node = node_int(yyvsp[0].number); }
break;
case 132:
#line 626 "parser.y"
{ yyval.node = node_float(&yyvsp[0].real); }
break;
case 133:
#line 627 "parser.y"
{ yyval.node = node_nil(); }
break;
case 135:
#line 630 "parser.y"
{ yyval.node = c_aggregate(yyvsp[-2].node, T_MIXED | (1 << REFSHIFT)); }
break;
case 136:
#line 632 "parser.y"
{ yyval.node = c_aggregate(yyvsp[-2].node, T_MAPPING); }
break;
case 137:
#line 633 "parser.y"
{
		  yyval.node = c_local_var(yyvsp[0].node);
		  if (yyval.node == (node *) NULL) {
		      yyval.node = c_global_var(yyvsp[0].node);
		      if (typechecking) {
			  if (yyval.node->mod != T_MIXED && !conf_typechecking()) {
			      /*
			       * global vars might be modified by untypechecked
			       * functions...
			       */
			      yyval.node = node_mon(N_CAST, yyval.node->mod, yyval.node);
			      yyval.node->sclass = yyval.node->l.left->sclass;
			      if (yyval.node->sclass != (String *) NULL) {
				  str_ref(yyval.node->sclass);
			      }
			  }
		      }
		  }
		  if (!typechecking) {
		      /* the variable could be anything */
		      yyval.node->mod = T_MIXED;
		  }
		}
break;
case 138:
#line 656 "parser.y"
{
		  yyval.node = c_global_var(yyvsp[0].node);
		  if (typechecking) {
		      if (yyval.node->mod != T_MIXED && !conf_typechecking()) {
			  /*
			   * global vars might be modified by untypechecked
			   * functions...
			   */
			  yyval.node = node_mon(N_CAST, yyval.node->mod, yyval.node);
			  yyval.node->sclass = yyval.node->l.left->sclass;
			  if (yyval.node->sclass != (String *) NULL) {
			      str_ref(yyval.node->sclass);
			  }
		      }
		  } else {
		      /* the variable could be anything */
		      yyval.node->mod = T_MIXED;
		  }
		}
break;
case 139:
#line 676 "parser.y"
{ yyval.node = yyvsp[-1].node; }
break;
case 140:
#line 678 "parser.y"
{ yyval.node = c_checkcall(c_funcall(yyvsp[-3].node, yyvsp[-1].node), typechecking); }
break;
case 141:
#line 680 "parser.y"
{ yyval.node = c_address(yyvsp[-3].node, yyvsp[-1].node, typechecking); }
break;
case 142:
#line 682 "parser.y"
{ yyval.node = c_extend(yyvsp[-4].node, yyvsp[-1].node, typechecking); }
break;
case 143:
#line 684 "parser.y"
{ yyval.node = c_call(yyvsp[-4].node, yyvsp[-1].node, typechecking); }
break;
case 144:
#line 686 "parser.y"
{ c_startcond(); }
break;
case 145:
#line 688 "parser.y"
{
		  c_endcond();
		  yyval.node = node_mon(N_CATCH, T_STRING, yyvsp[-1].node);
		}
break;
case 146:
#line 693 "parser.y"
{ yyval.node = c_new_object(yyvsp[0].node, (node *) NULL); }
break;
case 147:
#line 695 "parser.y"
{ yyval.node = c_new_object(yyvsp[-3].node, yyvsp[-1].node); }
break;
case 148:
#line 697 "parser.y"
{
		  t_void(yyvsp[-5].node);
		  yyval.node = c_checkcall(c_arrow(yyvsp[-5].node, yyvsp[-3].node, yyvsp[-1].node), typechecking);
		}
break;
case 149:
#line 702 "parser.y"
{ yyval.node = c_instanceof(yyvsp[-3].node, yyvsp[0].node); }
break;
case 151:
#line 708 "parser.y"
{ yyval.node = idx(yyvsp[-3].node, yyvsp[-1].node); }
break;
case 152:
#line 710 "parser.y"
{ yyval.node = range(yyvsp[-5].node, yyvsp[-3].node, yyvsp[-1].node); }
break;
case 154:
#line 716 "parser.y"
{ yyval.node = postfix(N_PLUS_PLUS, yyvsp[-1].node, "++"); }
break;
case 155:
#line 718 "parser.y"
{ yyval.node = postfix(N_MIN_MIN, yyvsp[-1].node, "--"); }
break;
case 157:
#line 724 "parser.y"
{ yyval.node = prefix(N_ADD_EQ_1, yyvsp[0].node, "++"); }
break;
case 158:
#line 726 "parser.y"
{ yyval.node = prefix(N_SUB_EQ_1, yyvsp[0].node, "--"); }
break;
case 159:
#line 728 "parser.y"
{ yyval.node = umin(yyvsp[0].node); }
break;
case 160:
#line 730 "parser.y"
{ yyval.node = yyvsp[0].node; }
break;
case 161:
#line 732 "parser.y"
{
		  t_void(yyvsp[0].node);
		  yyval.node = c_not(yyvsp[0].node);
		}
break;
case 162:
#line 737 "parser.y"
{
		  yyval.node = yyvsp[0].node;
		  t_void(yyval.node);
		  if (yyval.node->mod == T_INT) {
		      yyval.node = _xor(N_XOR, yyval.node, node_int((Int) -1), "^");
		  } else if (yyval.node->mod == T_OBJECT || yyval.node->mod == T_CLASS) {
		      yyval.node = node_mon(N_NEG, T_OBJECT, yyval.node);
		  } else {
		      if (typechecking && yyval.node->mod != T_MIXED) {
			  char tnbuf[TNBUFSIZE];

			  c_error("bad argument type for ~ (%s)",
				  i_typename(tnbuf, yyval.node->mod));
		      }
		      yyval.node = node_mon(N_NEG, T_MIXED, yyval.node);
		  }
		}
break;
case 164:
#line 759 "parser.y"
{
		  yyvsp[-3].node->mod |= (yyvsp[-2].type << REFSHIFT) & T_REF;
		  yyval.node = cast(yyvsp[0].node, yyvsp[-3].node);
		}
break;
case 166:
#line 768 "parser.y"
{ yyval.node = mult(N_MULT, yyvsp[-2].node, yyvsp[0].node, "*"); }
break;
case 167:
#line 770 "parser.y"
{ yyval.node = mdiv(N_DIV, yyvsp[-2].node, yyvsp[0].node, "/"); }
break;
case 168:
#line 772 "parser.y"
{ yyval.node = mod(N_MOD, yyvsp[-2].node, yyvsp[0].node, "%"); }
break;
case 170:
#line 778 "parser.y"
{ yyval.node = add(N_ADD, yyvsp[-2].node, yyvsp[0].node, "+"); }
break;
case 171:
#line 780 "parser.y"
{ yyval.node = sub(N_SUB, yyvsp[-2].node, yyvsp[0].node, "-"); }
break;
case 173:
#line 786 "parser.y"
{ yyval.node = lshift(N_LSHIFT, yyvsp[-2].node, yyvsp[0].node, "<<"); }
break;
case 174:
#line 788 "parser.y"
{ yyval.node = rshift(N_RSHIFT, yyvsp[-2].node, yyvsp[0].node, ">>"); }
break;
case 176:
#line 794 "parser.y"
{ yyval.node = rel(N_LT, yyval.node, yyvsp[0].node, "<"); }
break;
case 177:
#line 796 "parser.y"
{ yyval.node = rel(N_GT, yyval.node, yyvsp[0].node, ">"); }
break;
case 178:
#line 798 "parser.y"
{ yyval.node = rel(N_LE, yyval.node, yyvsp[0].node, "<="); }
break;
case 179:
#line 800 "parser.y"
{ yyval.node = rel(N_GE, yyval.node, yyvsp[0].node, ">="); }
break;
case 181:
#line 806 "parser.y"
{ yyval.node = eq(yyvsp[-2].node, yyvsp[0].node); }
break;
case 182:
#line 808 "parser.y"
{ yyval.node = c_not(eq(yyvsp[-2].node, yyvsp[0].node)); }
break;
case 184:
#line 814 "parser.y"
{ yyval.node = _and(N_AND, yyvsp[-2].node, yyvsp[0].node, "&"); }
break;
case 186:
#line 820 "parser.y"
{ yyval.node = _xor(N_XOR, yyvsp[-2].node, yyvsp[0].node, "^"); }
break;
case 188:
#line 826 "parser.y"
{ yyval.node = _or(N_OR, yyvsp[-2].node, yyvsp[0].node, "|"); }
break;
case 190:
#line 832 "parser.y"
{ yyval.node = land(yyvsp[-2].node, yyvsp[0].node); }
break;
case 192:
#line 838 "parser.y"
{ yyval.node = lor(yyvsp[-2].node, yyvsp[0].node); }
break;
case 194:
#line 844 "parser.y"
{ c_startcond(); }
break;
case 195:
#line 846 "parser.y"
{ c_startcond2(); }
break;
case 196:
#line 848 "parser.y"
{
		  c_matchcond();
		  yyval.node = quest(yyvsp[-6].node, yyvsp[-3].node, yyvsp[0].node);
		}
break;
case 198:
#line 857 "parser.y"
{ yyval.node = assign(c_assign(yyvsp[-2].node), yyvsp[0].node); }
break;
case 199:
#line 859 "parser.y"
{ yyval.node = add(N_ADD_EQ, c_lvalue(yyvsp[-2].node, "+="), yyvsp[0].node, "+="); }
break;
case 200:
#line 861 "parser.y"
{ yyval.node = sub(N_SUB_EQ, c_lvalue(yyvsp[-2].node, "-="), yyvsp[0].node, "-="); }
break;
case 201:
#line 863 "parser.y"
{ yyval.node = mult(N_MULT_EQ, c_lvalue(yyvsp[-2].node, "*="), yyvsp[0].node, "*="); }
break;
case 202:
#line 865 "parser.y"
{ yyval.node = mdiv(N_DIV_EQ, c_lvalue(yyvsp[-2].node, "/="), yyvsp[0].node, "/="); }
break;
case 203:
#line 867 "parser.y"
{ yyval.node = mod(N_MOD_EQ, c_lvalue(yyvsp[-2].node, "%="), yyvsp[0].node, "%="); }
break;
case 204:
#line 869 "parser.y"
{ yyval.node = lshift(N_LSHIFT_EQ, c_lvalue(yyvsp[-2].node, "<<="), yyvsp[0].node, "<<="); }
break;
case 205:
#line 871 "parser.y"
{ yyval.node = rshift(N_RSHIFT_EQ, c_lvalue(yyvsp[-2].node, ">>="), yyvsp[0].node, ">>="); }
break;
case 206:
#line 873 "parser.y"
{ yyval.node = _and(N_AND_EQ, c_lvalue(yyvsp[-2].node, "&="), yyvsp[0].node, "&="); }
break;
case 207:
#line 875 "parser.y"
{ yyval.node = _xor(N_XOR_EQ, c_lvalue(yyvsp[-2].node, "^="), yyvsp[0].node, "^="); }
break;
case 208:
#line 877 "parser.y"
{ yyval.node = _or(N_OR_EQ, c_lvalue(yyvsp[-2].node, "|="), yyvsp[0].node, "|="); }
break;
case 210:
#line 883 "parser.y"
{ yyval.node = comma(yyvsp[-2].node, yyvsp[0].node); }
break;
case 211:
#line 888 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 213:
#line 894 "parser.y"
{ t_void(yyval.node = yyvsp[0].node); }
break;
case 214:
#line 899 "parser.y"
{ t_void(yyval.node = yyvsp[0].node); }
break;
case 215:
#line 903 "parser.y"
{ t_void(yyval.node = yyvsp[0].node); }
break;
case 216:
#line 905 "parser.y"
{
		  t_void(yyvsp[0].node);
		  yyval.node = node_bin(N_PAIR, 0, yyvsp[-2].node, yyvsp[0].node);
		}
break;
case 217:
#line 913 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 219:
#line 916 "parser.y"
{
		  yyval.node = yyvsp[-1].node;
		  if (yyval.node->type == N_PAIR) {
		      yyval.node->r.right = node_mon(N_SPREAD, -1, yyval.node->r.right);
		  } else {
		      yyval.node = node_mon(N_SPREAD, -1, yyval.node);
		  }
		}
break;
case 220:
#line 928 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 222:
#line 931 "parser.y"
{ yyval.node = yyvsp[-1].node; }
break;
case 223:
#line 936 "parser.y"
{
		  t_void(yyvsp[-2].node);
		  t_void(yyvsp[0].node);
		  yyval.node = node_bin(N_COMMA, 0, yyvsp[-2].node, yyvsp[0].node);
		}
break;
case 225:
#line 946 "parser.y"
{ yyval.node = node_bin(N_PAIR, 0, yyvsp[-2].node, yyvsp[0].node); }
break;
case 226:
#line 951 "parser.y"
{ yyval.node = (node *) NULL; }
break;
case 228:
#line 954 "parser.y"
{ yyval.node = yyvsp[-1].node; }
break;
#line 3422 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yysslim)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
